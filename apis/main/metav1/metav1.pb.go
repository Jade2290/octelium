// Copyright Octelium Labs, LLC. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.1
// 	protoc        v3.21.12
// source: metav1.proto

package metav1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CommonListOptions_OrderBy_Type int32

const (
	CommonListOptions_OrderBy_TYPE_UNSET CommonListOptions_OrderBy_Type = 0
	CommonListOptions_OrderBy_NAME       CommonListOptions_OrderBy_Type = 1
	CommonListOptions_OrderBy_CREATED_AT CommonListOptions_OrderBy_Type = 2
)

// Enum value maps for CommonListOptions_OrderBy_Type.
var (
	CommonListOptions_OrderBy_Type_name = map[int32]string{
		0: "TYPE_UNSET",
		1: "NAME",
		2: "CREATED_AT",
	}
	CommonListOptions_OrderBy_Type_value = map[string]int32{
		"TYPE_UNSET": 0,
		"NAME":       1,
		"CREATED_AT": 2,
	}
)

func (x CommonListOptions_OrderBy_Type) Enum() *CommonListOptions_OrderBy_Type {
	p := new(CommonListOptions_OrderBy_Type)
	*p = x
	return p
}

func (x CommonListOptions_OrderBy_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CommonListOptions_OrderBy_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_metav1_proto_enumTypes[0].Descriptor()
}

func (CommonListOptions_OrderBy_Type) Type() protoreflect.EnumType {
	return &file_metav1_proto_enumTypes[0]
}

func (x CommonListOptions_OrderBy_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CommonListOptions_OrderBy_Type.Descriptor instead.
func (CommonListOptions_OrderBy_Type) EnumDescriptor() ([]byte, []int) {
	return file_metav1_proto_rawDescGZIP(), []int{10, 0, 0}
}

type CommonListOptions_OrderBy_Mode int32

const (
	CommonListOptions_OrderBy_MODE_UNSET CommonListOptions_OrderBy_Mode = 0
	CommonListOptions_OrderBy_ASC        CommonListOptions_OrderBy_Mode = 1
	CommonListOptions_OrderBy_DESC       CommonListOptions_OrderBy_Mode = 2
)

// Enum value maps for CommonListOptions_OrderBy_Mode.
var (
	CommonListOptions_OrderBy_Mode_name = map[int32]string{
		0: "MODE_UNSET",
		1: "ASC",
		2: "DESC",
	}
	CommonListOptions_OrderBy_Mode_value = map[string]int32{
		"MODE_UNSET": 0,
		"ASC":        1,
		"DESC":       2,
	}
)

func (x CommonListOptions_OrderBy_Mode) Enum() *CommonListOptions_OrderBy_Mode {
	p := new(CommonListOptions_OrderBy_Mode)
	*p = x
	return p
}

func (x CommonListOptions_OrderBy_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CommonListOptions_OrderBy_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_metav1_proto_enumTypes[1].Descriptor()
}

func (CommonListOptions_OrderBy_Mode) Type() protoreflect.EnumType {
	return &file_metav1_proto_enumTypes[1]
}

func (x CommonListOptions_OrderBy_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CommonListOptions_OrderBy_Mode.Descriptor instead.
func (CommonListOptions_OrderBy_Mode) EnumDescriptor() ([]byte, []int) {
	return file_metav1_proto_rawDescGZIP(), []int{10, 0, 1}
}

type Metadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UID is the unique UUID value for the object assigned by the Cluster.
	// Read-only.
	Uid string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	// Name is the name of the object. It must be unique within a certain
	// API/Version/Kind tuple.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// CreatedAt is the timestamp of creation of the object. Read-only.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	// UpdatedAt is the timestamp of when the object was last updated.
	// Read-only.
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	// DisplayName is the name that can be shown publicly for the object. Doesn't
	// need to be unique.
	DisplayName string `protobuf:"bytes,5,opt,name=displayName,proto3" json:"displayName,omitempty"`
	// Description is used to describe the object in a short sentence. Maximum
	// characters are 1000.
	Description string `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	// Labels is a map of string keys and values to organize objects.
	Labels map[string]string `protobuf:"bytes,7,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Tags is an optional array of tags that classify the Resource.
	Tags []string `protobuf:"bytes,8,rep,name=tags,proto3" json:"tags,omitempty"`
	// Labels is a map of string keys and values that can be used to store
	// metadata about the object.
	Annotations map[string]string `protobuf:"bytes,9,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// PicURL is the Picture URL of the resource.
	PicURL string `protobuf:"bytes,10,opt,name=picURL,proto3" json:"picURL,omitempty"`
	// ResourceVersion is a unique ID that represent the current version of the
	// resource object. Used by the Cluster to detect updates.
	ResourceVersion string `protobuf:"bytes,11,opt,name=resourceVersion,proto3" json:"resourceVersion,omitempty"`
	// LastResourceVersion is the ResourceVersion of the last update of the
	// Resource.
	LastResourceVersion string `protobuf:"bytes,12,opt,name=lastResourceVersion,proto3" json:"lastResourceVersion,omitempty"`
	// ActorRef is the object reference to the Actor resource, typically a
	// Session, who is responsible for the current resource change. If ActorRef is
	// not set, then the current change of the resource was done by the Cluster
	ActorRef *ObjectReference `protobuf:"bytes,13,opt,name=actorRef,proto3" json:"actorRef,omitempty"`
	// ActorOperation is the gRPC full method triggered by the actorRef to modify
	// the Resource
	ActorOperation string `protobuf:"bytes,14,opt,name=actorOperation,proto3" json:"actorOperation,omitempty"`
	// IsSystem means that the resource is created by the Cluster and it cannot be
	// managed by the administrators. Read-only.
	IsSystem bool `protobuf:"varint,15,opt,name=isSystem,proto3" json:"isSystem,omitempty"`
	// SpecLabels is map used internally by the Cluster for quick searches among
	// lists of objects. Read-only.
	SpecLabels map[string]string `protobuf:"bytes,16,rep,name=specLabels,proto3" json:"specLabels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// IsUserHidden means that the resource object is hidden from ordinary Users
	// and should not be exposed via the User APIs.
	IsUserHidden bool `protobuf:"varint,17,opt,name=isUserHidden,proto3" json:"isUserHidden,omitempty"`
	// IsSystemHidden means that the resource object is hidden by the Cluster and
	// should not be exposed via the APIs.
	IsSystemHidden bool `protobuf:"varint,18,opt,name=isSystemHidden,proto3" json:"isSystemHidden,omitempty"`
	// SystemLabels is a similar map to specLabels. Used only by the Cluster.
	SystemLabels  map[string]string `protobuf:"bytes,19,rep,name=systemLabels,proto3" json:"systemLabels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Metadata) Reset() {
	*x = Metadata{}
	mi := &file_metav1_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata) ProtoMessage() {}

func (x *Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_metav1_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata.ProtoReflect.Descriptor instead.
func (*Metadata) Descriptor() ([]byte, []int) {
	return file_metav1_proto_rawDescGZIP(), []int{0}
}

func (x *Metadata) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Metadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Metadata) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Metadata) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Metadata) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *Metadata) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Metadata) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Metadata) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Metadata) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *Metadata) GetPicURL() string {
	if x != nil {
		return x.PicURL
	}
	return ""
}

func (x *Metadata) GetResourceVersion() string {
	if x != nil {
		return x.ResourceVersion
	}
	return ""
}

func (x *Metadata) GetLastResourceVersion() string {
	if x != nil {
		return x.LastResourceVersion
	}
	return ""
}

func (x *Metadata) GetActorRef() *ObjectReference {
	if x != nil {
		return x.ActorRef
	}
	return nil
}

func (x *Metadata) GetActorOperation() string {
	if x != nil {
		return x.ActorOperation
	}
	return ""
}

func (x *Metadata) GetIsSystem() bool {
	if x != nil {
		return x.IsSystem
	}
	return false
}

func (x *Metadata) GetSpecLabels() map[string]string {
	if x != nil {
		return x.SpecLabels
	}
	return nil
}

func (x *Metadata) GetIsUserHidden() bool {
	if x != nil {
		return x.IsUserHidden
	}
	return false
}

func (x *Metadata) GetIsSystemHidden() bool {
	if x != nil {
		return x.IsSystemHidden
	}
	return false
}

func (x *Metadata) GetSystemLabels() map[string]string {
	if x != nil {
		return x.SystemLabels
	}
	return nil
}

type ObjectReference struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// APIVersion is the API version of the reference resource
	ApiVersion string `protobuf:"bytes,1,opt,name=apiVersion,proto3" json:"apiVersion,omitempty"`
	// Kind is the resource kind. A kind is unique per an APIVersion.
	Kind string `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	// UID is the resource object UID. A UID is unique across the entire Cluster.
	Uid string `protobuf:"bytes,3,opt,name=uid,proto3" json:"uid,omitempty"`
	// Name is the resource object name. A name is unique per a certain kind.
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// ResourceVersion is the resourceVersion of the resource.
	ResourceVersion string `protobuf:"bytes,5,opt,name=resourceVersion,proto3" json:"resourceVersion,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ObjectReference) Reset() {
	*x = ObjectReference{}
	mi := &file_metav1_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ObjectReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectReference) ProtoMessage() {}

func (x *ObjectReference) ProtoReflect() protoreflect.Message {
	mi := &file_metav1_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectReference.ProtoReflect.Descriptor instead.
func (*ObjectReference) Descriptor() ([]byte, []int) {
	return file_metav1_proto_rawDescGZIP(), []int{1}
}

func (x *ObjectReference) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *ObjectReference) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *ObjectReference) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *ObjectReference) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ObjectReference) GetResourceVersion() string {
	if x != nil {
		return x.ResourceVersion
	}
	return ""
}

type Duration struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*Duration_Milliseconds
	//	*Duration_Seconds
	//	*Duration_Minutes
	//	*Duration_Hours
	//	*Duration_Days
	//	*Duration_Weeks
	//	*Duration_Months
	Type          isDuration_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Duration) Reset() {
	*x = Duration{}
	mi := &file_metav1_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Duration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Duration) ProtoMessage() {}

func (x *Duration) ProtoReflect() protoreflect.Message {
	mi := &file_metav1_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Duration.ProtoReflect.Descriptor instead.
func (*Duration) Descriptor() ([]byte, []int) {
	return file_metav1_proto_rawDescGZIP(), []int{2}
}

func (x *Duration) GetType() isDuration_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Duration) GetMilliseconds() uint32 {
	if x != nil {
		if x, ok := x.Type.(*Duration_Milliseconds); ok {
			return x.Milliseconds
		}
	}
	return 0
}

func (x *Duration) GetSeconds() uint32 {
	if x != nil {
		if x, ok := x.Type.(*Duration_Seconds); ok {
			return x.Seconds
		}
	}
	return 0
}

func (x *Duration) GetMinutes() uint32 {
	if x != nil {
		if x, ok := x.Type.(*Duration_Minutes); ok {
			return x.Minutes
		}
	}
	return 0
}

func (x *Duration) GetHours() uint32 {
	if x != nil {
		if x, ok := x.Type.(*Duration_Hours); ok {
			return x.Hours
		}
	}
	return 0
}

func (x *Duration) GetDays() uint32 {
	if x != nil {
		if x, ok := x.Type.(*Duration_Days); ok {
			return x.Days
		}
	}
	return 0
}

func (x *Duration) GetWeeks() uint32 {
	if x != nil {
		if x, ok := x.Type.(*Duration_Weeks); ok {
			return x.Weeks
		}
	}
	return 0
}

func (x *Duration) GetMonths() uint32 {
	if x != nil {
		if x, ok := x.Type.(*Duration_Months); ok {
			return x.Months
		}
	}
	return 0
}

type isDuration_Type interface {
	isDuration_Type()
}

type Duration_Milliseconds struct {
	// Milliseconds is the duration set in milliseconds
	Milliseconds uint32 `protobuf:"varint,1,opt,name=milliseconds,proto3,oneof"`
}

type Duration_Seconds struct {
	// Seconds is the duration set in seconds
	Seconds uint32 `protobuf:"varint,2,opt,name=seconds,proto3,oneof"`
}

type Duration_Minutes struct {
	// Minutes is the duration set in minutes
	Minutes uint32 `protobuf:"varint,3,opt,name=minutes,proto3,oneof"`
}

type Duration_Hours struct {
	// Hours is the duration set in hours
	Hours uint32 `protobuf:"varint,4,opt,name=hours,proto3,oneof"`
}

type Duration_Days struct {
	// Days is the duration set in days
	Days uint32 `protobuf:"varint,5,opt,name=days,proto3,oneof"`
}

type Duration_Weeks struct {
	// Weeks is the duration set in weeks
	Weeks uint32 `protobuf:"varint,6,opt,name=weeks,proto3,oneof"`
}

type Duration_Months struct {
	// Months is the duration set in months
	Months uint32 `protobuf:"varint,7,opt,name=months,proto3,oneof"`
}

func (*Duration_Milliseconds) isDuration_Type() {}

func (*Duration_Seconds) isDuration_Type() {}

func (*Duration_Minutes) isDuration_Type() {}

func (*Duration_Hours) isDuration_Type() {}

func (*Duration_Days) isDuration_Type() {}

func (*Duration_Weeks) isDuration_Type() {}

func (*Duration_Months) isDuration_Type() {}

type DeleteOptions struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UID is the objet's UID.
	Uid string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	// Name is the object name that needs to be deleted. Either the name or the
	// UID must be used.
	Name          string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteOptions) Reset() {
	*x = DeleteOptions{}
	mi := &file_metav1_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOptions) ProtoMessage() {}

func (x *DeleteOptions) ProtoReflect() protoreflect.Message {
	mi := &file_metav1_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOptions.ProtoReflect.Descriptor instead.
func (*DeleteOptions) Descriptor() ([]byte, []int) {
	return file_metav1_proto_rawDescGZIP(), []int{3}
}

func (x *DeleteOptions) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *DeleteOptions) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetOptions struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UID is the object's UID
	Uid string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	// Name is the object's name
	Name          string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetOptions) Reset() {
	*x = GetOptions{}
	mi := &file_metav1_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOptions) ProtoMessage() {}

func (x *GetOptions) ProtoReflect() protoreflect.Message {
	mi := &file_metav1_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOptions.ProtoReflect.Descriptor instead.
func (*GetOptions) Descriptor() ([]byte, []int) {
	return file_metav1_proto_rawDescGZIP(), []int{4}
}

func (x *GetOptions) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *GetOptions) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type OperationResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OperationResult) Reset() {
	*x = OperationResult{}
	mi := &file_metav1_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OperationResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationResult) ProtoMessage() {}

func (x *OperationResult) ProtoReflect() protoreflect.Message {
	mi := &file_metav1_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationResult.ProtoReflect.Descriptor instead.
func (*OperationResult) Descriptor() ([]byte, []int) {
	return file_metav1_proto_rawDescGZIP(), []int{5}
}

type DualStackIP struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// IPv4 is the IPv4 address.
	Ipv4 string `protobuf:"bytes,1,opt,name=ipv4,proto3" json:"ipv4,omitempty"`
	// IPv6 is the IPv6 address.
	Ipv6          string `protobuf:"bytes,2,opt,name=ipv6,proto3" json:"ipv6,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DualStackIP) Reset() {
	*x = DualStackIP{}
	mi := &file_metav1_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DualStackIP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DualStackIP) ProtoMessage() {}

func (x *DualStackIP) ProtoReflect() protoreflect.Message {
	mi := &file_metav1_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DualStackIP.ProtoReflect.Descriptor instead.
func (*DualStackIP) Descriptor() ([]byte, []int) {
	return file_metav1_proto_rawDescGZIP(), []int{6}
}

func (x *DualStackIP) GetIpv4() string {
	if x != nil {
		return x.Ipv4
	}
	return ""
}

func (x *DualStackIP) GetIpv6() string {
	if x != nil {
		return x.Ipv6
	}
	return ""
}

type DualStackNetwork struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// V4 is the IPv4 network address represented as CIDR notation IP address
	// and prefix length (e.g. `192.0.2.0/24`).
	V4 string `protobuf:"bytes,1,opt,name=v4,proto3" json:"v4,omitempty"`
	// V6 is the IPv6 network address represented as CIDR notation IP address
	// and prefix length (e.g. `2001:db8::/32`).
	V6            string `protobuf:"bytes,2,opt,name=v6,proto3" json:"v6,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DualStackNetwork) Reset() {
	*x = DualStackNetwork{}
	mi := &file_metav1_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DualStackNetwork) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DualStackNetwork) ProtoMessage() {}

func (x *DualStackNetwork) ProtoReflect() protoreflect.Message {
	mi := &file_metav1_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DualStackNetwork.ProtoReflect.Descriptor instead.
func (*DualStackNetwork) Descriptor() ([]byte, []int) {
	return file_metav1_proto_rawDescGZIP(), []int{7}
}

func (x *DualStackNetwork) GetV4() string {
	if x != nil {
		return x.V4
	}
	return ""
}

func (x *DualStackNetwork) GetV6() string {
	if x != nil {
		return x.V6
	}
	return ""
}

type ListResponseMeta struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Page is the page number. Starts with zero.
	Page uint32 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	// ItemsPerPage is number of items per page.
	ItemsPerPage uint32 `protobuf:"varint,2,opt,name=itemsPerPage,proto3" json:"itemsPerPage,omitempty"`
	// TotalCount is the total count of items that can be obtained.
	TotalCount uint32 `protobuf:"varint,3,opt,name=totalCount,proto3" json:"totalCount,omitempty"`
	// HasMore shows whether there a next page is available
	HasMore       bool `protobuf:"varint,4,opt,name=hasMore,proto3" json:"hasMore,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListResponseMeta) Reset() {
	*x = ListResponseMeta{}
	mi := &file_metav1_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListResponseMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListResponseMeta) ProtoMessage() {}

func (x *ListResponseMeta) ProtoReflect() protoreflect.Message {
	mi := &file_metav1_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListResponseMeta.ProtoReflect.Descriptor instead.
func (*ListResponseMeta) Descriptor() ([]byte, []int) {
	return file_metav1_proto_rawDescGZIP(), []int{8}
}

func (x *ListResponseMeta) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListResponseMeta) GetItemsPerPage() uint32 {
	if x != nil {
		return x.ItemsPerPage
	}
	return 0
}

func (x *ListResponseMeta) GetTotalCount() uint32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *ListResponseMeta) GetHasMore() bool {
	if x != nil {
		return x.HasMore
	}
	return false
}

type LogMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID is the unique ID for the log entry
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// CreatedAt is the timestamp of creation.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	// Actor is the actor whose action triggered the log entry (i.e. the User,
	// their Session and Device if available)
	ActorRef *ObjectReference `protobuf:"bytes,3,opt,name=actorRef,proto3" json:"actorRef,omitempty"`
	// Target is the target of the action that triggered the log entry (e.g. the
	// Service and its Namespace in the case of a SERVICE log entry)
	TargetRef     *ObjectReference `protobuf:"bytes,4,opt,name=targetRef,proto3" json:"targetRef,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LogMetadata) Reset() {
	*x = LogMetadata{}
	mi := &file_metav1_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogMetadata) ProtoMessage() {}

func (x *LogMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_metav1_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogMetadata.ProtoReflect.Descriptor instead.
func (*LogMetadata) Descriptor() ([]byte, []int) {
	return file_metav1_proto_rawDescGZIP(), []int{9}
}

func (x *LogMetadata) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *LogMetadata) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *LogMetadata) GetActorRef() *ObjectReference {
	if x != nil {
		return x.ActorRef
	}
	return nil
}

func (x *LogMetadata) GetTargetRef() *ObjectReference {
	if x != nil {
		return x.TargetRef
	}
	return nil
}

type CommonListOptions struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Page is the page number, starts at zero.
	Page uint32 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	// ItemsPerPage is the items per page
	ItemsPerPage uint32 `protobuf:"varint,2,opt,name=itemsPerPage,proto3" json:"itemsPerPage,omitempty"`
	// OrderBy orders the list
	OrderBy       *CommonListOptions_OrderBy `protobuf:"bytes,3,opt,name=orderBy,proto3" json:"orderBy,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CommonListOptions) Reset() {
	*x = CommonListOptions{}
	mi := &file_metav1_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommonListOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonListOptions) ProtoMessage() {}

func (x *CommonListOptions) ProtoReflect() protoreflect.Message {
	mi := &file_metav1_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonListOptions.ProtoReflect.Descriptor instead.
func (*CommonListOptions) Descriptor() ([]byte, []int) {
	return file_metav1_proto_rawDescGZIP(), []int{10}
}

func (x *CommonListOptions) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *CommonListOptions) GetItemsPerPage() uint32 {
	if x != nil {
		return x.ItemsPerPage
	}
	return 0
}

func (x *CommonListOptions) GetOrderBy() *CommonListOptions_OrderBy {
	if x != nil {
		return x.OrderBy
	}
	return nil
}

type CommonListOptions_OrderBy struct {
	state         protoimpl.MessageState         `protogen:"open.v1"`
	Type          CommonListOptions_OrderBy_Type `protobuf:"varint,1,opt,name=type,proto3,enum=octelium.api.main.meta.v1.CommonListOptions_OrderBy_Type" json:"type,omitempty"`
	Mode          CommonListOptions_OrderBy_Mode `protobuf:"varint,2,opt,name=mode,proto3,enum=octelium.api.main.meta.v1.CommonListOptions_OrderBy_Mode" json:"mode,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CommonListOptions_OrderBy) Reset() {
	*x = CommonListOptions_OrderBy{}
	mi := &file_metav1_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommonListOptions_OrderBy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonListOptions_OrderBy) ProtoMessage() {}

func (x *CommonListOptions_OrderBy) ProtoReflect() protoreflect.Message {
	mi := &file_metav1_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonListOptions_OrderBy.ProtoReflect.Descriptor instead.
func (*CommonListOptions_OrderBy) Descriptor() ([]byte, []int) {
	return file_metav1_proto_rawDescGZIP(), []int{10, 0}
}

func (x *CommonListOptions_OrderBy) GetType() CommonListOptions_OrderBy_Type {
	if x != nil {
		return x.Type
	}
	return CommonListOptions_OrderBy_TYPE_UNSET
}

func (x *CommonListOptions_OrderBy) GetMode() CommonListOptions_OrderBy_Mode {
	if x != nil {
		return x.Mode
	}
	return CommonListOptions_OrderBy_MODE_UNSET
}

var File_metav1_proto protoreflect.FileDescriptor

var file_metav1_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19,
	0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x94, 0x09, 0x0a, 0x08, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x12, 0x56, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69,
	0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x69,
	0x63, 0x55, 0x52, 0x4c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x69, 0x63, 0x55,
	0x52, 0x4c, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x13,
	0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x46,
	0x0a, 0x08, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x66, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x65, 0x66, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x69, 0x73, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x69, 0x73, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x53, 0x0a, 0x0a, 0x73, 0x70,
	0x65, 0x63, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33,
	0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0a, 0x73, 0x70, 0x65, 0x63, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12,
	0x22, 0x0a, 0x0c, 0x69, 0x73, 0x55, 0x73, 0x65, 0x72, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x55, 0x73, 0x65, 0x72, 0x48, 0x69, 0x64,
	0x64, 0x65, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x73, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x48,
	0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x59, 0x0a, 0x0c, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x35, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x3d, 0x0a, 0x0f, 0x53, 0x70, 0x65, 0x63, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x3f, 0x0a, 0x11, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x95, 0x01, 0x0a, 0x0f, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x28, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xd0, 0x01, 0x0a, 0x08, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0c, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x0c,
	0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x07,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52,
	0x07, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x75,
	0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x69, 0x6e,
	0x75, 0x74, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x05, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x05, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x04,
	0x64, 0x61, 0x79, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61,
	0x79, 0x73, 0x12, 0x16, 0x0a, 0x05, 0x77, 0x65, 0x65, 0x6b, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x00, 0x52, 0x05, 0x77, 0x65, 0x65, 0x6b, 0x73, 0x12, 0x18, 0x0a, 0x06, 0x6d, 0x6f,
	0x6e, 0x74, 0x68, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x06, 0x6d, 0x6f,
	0x6e, 0x74, 0x68, 0x73, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x35, 0x0a, 0x0d,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x32, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x11, 0x0a, 0x0f, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x35, 0x0a, 0x0b, 0x44, 0x75,
	0x61, 0x6c, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x49, 0x50, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x70, 0x76,
	0x34, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x70, 0x76, 0x34, 0x12, 0x12, 0x0a,
	0x04, 0x69, 0x70, 0x76, 0x36, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x70, 0x76,
	0x36, 0x22, 0x32, 0x0a, 0x10, 0x44, 0x75, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x76, 0x34, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x76, 0x34, 0x12, 0x0e, 0x0a, 0x02, 0x76, 0x36, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x76, 0x36, 0x22, 0x84, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x50, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x50, 0x65, 0x72, 0x50, 0x61,
	0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x61, 0x73, 0x4d, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x68, 0x61, 0x73, 0x4d, 0x6f, 0x72, 0x65, 0x22, 0xe9, 0x01, 0x0a,
	0x0b, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x46, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c,
	0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x66, 0x12, 0x48,
	0x0a, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x66, 0x22, 0xa2, 0x03, 0x0a, 0x11, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x50, 0x65, 0x72, 0x50, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x50,
	0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x12, 0x4e, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69,
	0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x52, 0x07, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x1a, 0x84, 0x02, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x42, 0x79, 0x12, 0x4d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x39, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x4d, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x39, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x42, 0x79, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65,
	0x22, 0x30, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x41, 0x4d, 0x45,
	0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x41, 0x54,
	0x10, 0x02, 0x22, 0x29, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x4f,
	0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x53,
	0x43, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x45, 0x53, 0x43, 0x10, 0x02, 0x42, 0x2f, 0x5a,
	0x2d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x63, 0x74, 0x65,
	0x6c, 0x69, 0x75, 0x6d, 0x2f, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2f, 0x61, 0x70,
	0x69, 0x73, 0x2f, 0x6d, 0x61, 0x69, 0x6e, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x31, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_metav1_proto_rawDescOnce sync.Once
	file_metav1_proto_rawDescData = file_metav1_proto_rawDesc
)

func file_metav1_proto_rawDescGZIP() []byte {
	file_metav1_proto_rawDescOnce.Do(func() {
		file_metav1_proto_rawDescData = protoimpl.X.CompressGZIP(file_metav1_proto_rawDescData)
	})
	return file_metav1_proto_rawDescData
}

var file_metav1_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_metav1_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_metav1_proto_goTypes = []any{
	(CommonListOptions_OrderBy_Type)(0), // 0: octelium.api.main.meta.v1.CommonListOptions.OrderBy.Type
	(CommonListOptions_OrderBy_Mode)(0), // 1: octelium.api.main.meta.v1.CommonListOptions.OrderBy.Mode
	(*Metadata)(nil),                    // 2: octelium.api.main.meta.v1.Metadata
	(*ObjectReference)(nil),             // 3: octelium.api.main.meta.v1.ObjectReference
	(*Duration)(nil),                    // 4: octelium.api.main.meta.v1.Duration
	(*DeleteOptions)(nil),               // 5: octelium.api.main.meta.v1.DeleteOptions
	(*GetOptions)(nil),                  // 6: octelium.api.main.meta.v1.GetOptions
	(*OperationResult)(nil),             // 7: octelium.api.main.meta.v1.OperationResult
	(*DualStackIP)(nil),                 // 8: octelium.api.main.meta.v1.DualStackIP
	(*DualStackNetwork)(nil),            // 9: octelium.api.main.meta.v1.DualStackNetwork
	(*ListResponseMeta)(nil),            // 10: octelium.api.main.meta.v1.ListResponseMeta
	(*LogMetadata)(nil),                 // 11: octelium.api.main.meta.v1.LogMetadata
	(*CommonListOptions)(nil),           // 12: octelium.api.main.meta.v1.CommonListOptions
	nil,                                 // 13: octelium.api.main.meta.v1.Metadata.LabelsEntry
	nil,                                 // 14: octelium.api.main.meta.v1.Metadata.AnnotationsEntry
	nil,                                 // 15: octelium.api.main.meta.v1.Metadata.SpecLabelsEntry
	nil,                                 // 16: octelium.api.main.meta.v1.Metadata.SystemLabelsEntry
	(*CommonListOptions_OrderBy)(nil),   // 17: octelium.api.main.meta.v1.CommonListOptions.OrderBy
	(*timestamppb.Timestamp)(nil),       // 18: google.protobuf.Timestamp
}
var file_metav1_proto_depIdxs = []int32{
	18, // 0: octelium.api.main.meta.v1.Metadata.createdAt:type_name -> google.protobuf.Timestamp
	18, // 1: octelium.api.main.meta.v1.Metadata.updatedAt:type_name -> google.protobuf.Timestamp
	13, // 2: octelium.api.main.meta.v1.Metadata.labels:type_name -> octelium.api.main.meta.v1.Metadata.LabelsEntry
	14, // 3: octelium.api.main.meta.v1.Metadata.annotations:type_name -> octelium.api.main.meta.v1.Metadata.AnnotationsEntry
	3,  // 4: octelium.api.main.meta.v1.Metadata.actorRef:type_name -> octelium.api.main.meta.v1.ObjectReference
	15, // 5: octelium.api.main.meta.v1.Metadata.specLabels:type_name -> octelium.api.main.meta.v1.Metadata.SpecLabelsEntry
	16, // 6: octelium.api.main.meta.v1.Metadata.systemLabels:type_name -> octelium.api.main.meta.v1.Metadata.SystemLabelsEntry
	18, // 7: octelium.api.main.meta.v1.LogMetadata.createdAt:type_name -> google.protobuf.Timestamp
	3,  // 8: octelium.api.main.meta.v1.LogMetadata.actorRef:type_name -> octelium.api.main.meta.v1.ObjectReference
	3,  // 9: octelium.api.main.meta.v1.LogMetadata.targetRef:type_name -> octelium.api.main.meta.v1.ObjectReference
	17, // 10: octelium.api.main.meta.v1.CommonListOptions.orderBy:type_name -> octelium.api.main.meta.v1.CommonListOptions.OrderBy
	0,  // 11: octelium.api.main.meta.v1.CommonListOptions.OrderBy.type:type_name -> octelium.api.main.meta.v1.CommonListOptions.OrderBy.Type
	1,  // 12: octelium.api.main.meta.v1.CommonListOptions.OrderBy.mode:type_name -> octelium.api.main.meta.v1.CommonListOptions.OrderBy.Mode
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_metav1_proto_init() }
func file_metav1_proto_init() {
	if File_metav1_proto != nil {
		return
	}
	file_metav1_proto_msgTypes[2].OneofWrappers = []any{
		(*Duration_Milliseconds)(nil),
		(*Duration_Seconds)(nil),
		(*Duration_Minutes)(nil),
		(*Duration_Hours)(nil),
		(*Duration_Days)(nil),
		(*Duration_Weeks)(nil),
		(*Duration_Months)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_metav1_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_metav1_proto_goTypes,
		DependencyIndexes: file_metav1_proto_depIdxs,
		EnumInfos:         file_metav1_proto_enumTypes,
		MessageInfos:      file_metav1_proto_msgTypes,
	}.Build()
	File_metav1_proto = out.File
	file_metav1_proto_rawDesc = nil
	file_metav1_proto_goTypes = nil
	file_metav1_proto_depIdxs = nil
}
