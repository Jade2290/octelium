// Copyright Octelium Labs, LLC. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: corev1.proto

package corev1

import (
	context "context"
	metav1 "github.com/octelium/octelium/apis/main/metav1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MainService_CreatePolicy_FullMethodName            = "/octelium.api.main.core.v1.MainService/CreatePolicy"
	MainService_ListPolicy_FullMethodName              = "/octelium.api.main.core.v1.MainService/ListPolicy"
	MainService_UpdatePolicy_FullMethodName            = "/octelium.api.main.core.v1.MainService/UpdatePolicy"
	MainService_DeletePolicy_FullMethodName            = "/octelium.api.main.core.v1.MainService/DeletePolicy"
	MainService_GetPolicy_FullMethodName               = "/octelium.api.main.core.v1.MainService/GetPolicy"
	MainService_CreateUser_FullMethodName              = "/octelium.api.main.core.v1.MainService/CreateUser"
	MainService_ListUser_FullMethodName                = "/octelium.api.main.core.v1.MainService/ListUser"
	MainService_UpdateUser_FullMethodName              = "/octelium.api.main.core.v1.MainService/UpdateUser"
	MainService_DeleteUser_FullMethodName              = "/octelium.api.main.core.v1.MainService/DeleteUser"
	MainService_GetUser_FullMethodName                 = "/octelium.api.main.core.v1.MainService/GetUser"
	MainService_CreateNamespace_FullMethodName         = "/octelium.api.main.core.v1.MainService/CreateNamespace"
	MainService_UpdateNamespace_FullMethodName         = "/octelium.api.main.core.v1.MainService/UpdateNamespace"
	MainService_ListNamespace_FullMethodName           = "/octelium.api.main.core.v1.MainService/ListNamespace"
	MainService_DeleteNamespace_FullMethodName         = "/octelium.api.main.core.v1.MainService/DeleteNamespace"
	MainService_GetNamespace_FullMethodName            = "/octelium.api.main.core.v1.MainService/GetNamespace"
	MainService_CreateService_FullMethodName           = "/octelium.api.main.core.v1.MainService/CreateService"
	MainService_ListService_FullMethodName             = "/octelium.api.main.core.v1.MainService/ListService"
	MainService_UpdateService_FullMethodName           = "/octelium.api.main.core.v1.MainService/UpdateService"
	MainService_DeleteService_FullMethodName           = "/octelium.api.main.core.v1.MainService/DeleteService"
	MainService_GetService_FullMethodName              = "/octelium.api.main.core.v1.MainService/GetService"
	MainService_ListSession_FullMethodName             = "/octelium.api.main.core.v1.MainService/ListSession"
	MainService_DeleteSession_FullMethodName           = "/octelium.api.main.core.v1.MainService/DeleteSession"
	MainService_GetSession_FullMethodName              = "/octelium.api.main.core.v1.MainService/GetSession"
	MainService_UpdateSession_FullMethodName           = "/octelium.api.main.core.v1.MainService/UpdateSession"
	MainService_CreateSecret_FullMethodName            = "/octelium.api.main.core.v1.MainService/CreateSecret"
	MainService_ListSecret_FullMethodName              = "/octelium.api.main.core.v1.MainService/ListSecret"
	MainService_DeleteSecret_FullMethodName            = "/octelium.api.main.core.v1.MainService/DeleteSecret"
	MainService_GetSecret_FullMethodName               = "/octelium.api.main.core.v1.MainService/GetSecret"
	MainService_UpdateSecret_FullMethodName            = "/octelium.api.main.core.v1.MainService/UpdateSecret"
	MainService_CreateGroup_FullMethodName             = "/octelium.api.main.core.v1.MainService/CreateGroup"
	MainService_ListGroup_FullMethodName               = "/octelium.api.main.core.v1.MainService/ListGroup"
	MainService_UpdateGroup_FullMethodName             = "/octelium.api.main.core.v1.MainService/UpdateGroup"
	MainService_DeleteGroup_FullMethodName             = "/octelium.api.main.core.v1.MainService/DeleteGroup"
	MainService_GetGroup_FullMethodName                = "/octelium.api.main.core.v1.MainService/GetGroup"
	MainService_ListDevice_FullMethodName              = "/octelium.api.main.core.v1.MainService/ListDevice"
	MainService_DeleteDevice_FullMethodName            = "/octelium.api.main.core.v1.MainService/DeleteDevice"
	MainService_GetDevice_FullMethodName               = "/octelium.api.main.core.v1.MainService/GetDevice"
	MainService_UpdateDevice_FullMethodName            = "/octelium.api.main.core.v1.MainService/UpdateDevice"
	MainService_CreateCredential_FullMethodName        = "/octelium.api.main.core.v1.MainService/CreateCredential"
	MainService_UpdateCredential_FullMethodName        = "/octelium.api.main.core.v1.MainService/UpdateCredential"
	MainService_DeleteCredential_FullMethodName        = "/octelium.api.main.core.v1.MainService/DeleteCredential"
	MainService_ListCredential_FullMethodName          = "/octelium.api.main.core.v1.MainService/ListCredential"
	MainService_GetCredential_FullMethodName           = "/octelium.api.main.core.v1.MainService/GetCredential"
	MainService_GenerateCredentialToken_FullMethodName = "/octelium.api.main.core.v1.MainService/GenerateCredentialToken"
	MainService_CreateIdentityProvider_FullMethodName  = "/octelium.api.main.core.v1.MainService/CreateIdentityProvider"
	MainService_GetIdentityProvider_FullMethodName     = "/octelium.api.main.core.v1.MainService/GetIdentityProvider"
	MainService_ListIdentityProvider_FullMethodName    = "/octelium.api.main.core.v1.MainService/ListIdentityProvider"
	MainService_UpdateIdentityProvider_FullMethodName  = "/octelium.api.main.core.v1.MainService/UpdateIdentityProvider"
	MainService_DeleteIdentityProvider_FullMethodName  = "/octelium.api.main.core.v1.MainService/DeleteIdentityProvider"
	MainService_GetRegion_FullMethodName               = "/octelium.api.main.core.v1.MainService/GetRegion"
	MainService_ListRegion_FullMethodName              = "/octelium.api.main.core.v1.MainService/ListRegion"
	MainService_ListGateway_FullMethodName             = "/octelium.api.main.core.v1.MainService/ListGateway"
	MainService_GetGateway_FullMethodName              = "/octelium.api.main.core.v1.MainService/GetGateway"
	MainService_GetClusterConfig_FullMethodName        = "/octelium.api.main.core.v1.MainService/GetClusterConfig"
	MainService_UpdateClusterConfig_FullMethodName     = "/octelium.api.main.core.v1.MainService/UpdateClusterConfig"
)

// MainServiceClient is the client API for MainService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MainServiceClient interface {
	// CreatePolicy creates a Policy
	CreatePolicy(ctx context.Context, in *Policy, opts ...grpc.CallOption) (*Policy, error)
	// ListPolicy lists Policy
	ListPolicy(ctx context.Context, in *ListPolicyOptions, opts ...grpc.CallOption) (*PolicyList, error)
	// UpdatePolicy updates a Policy
	UpdatePolicy(ctx context.Context, in *Policy, opts ...grpc.CallOption) (*Policy, error)
	// DeletePolicy deletes a Policy
	DeletePolicy(ctx context.Context, in *metav1.DeleteOptions, opts ...grpc.CallOption) (*metav1.OperationResult, error)
	// GetPolicy retrieves a specific Policy
	GetPolicy(ctx context.Context, in *metav1.GetOptions, opts ...grpc.CallOption) (*Policy, error)
	// CreateUser creates a User
	CreateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	// ListUser lists Users
	ListUser(ctx context.Context, in *ListUserOptions, opts ...grpc.CallOption) (*UserList, error)
	// UpdateUser updates a User
	UpdateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	// DeleteUser deletes a User
	DeleteUser(ctx context.Context, in *metav1.DeleteOptions, opts ...grpc.CallOption) (*metav1.OperationResult, error)
	// GetUser retrieves a specific User
	GetUser(ctx context.Context, in *metav1.GetOptions, opts ...grpc.CallOption) (*User, error)
	// CreateNamespace creates a Namespace
	CreateNamespace(ctx context.Context, in *Namespace, opts ...grpc.CallOption) (*Namespace, error)
	// UpdateNamespace updates a Namespace
	UpdateNamespace(ctx context.Context, in *Namespace, opts ...grpc.CallOption) (*Namespace, error)
	// ListNamespace lists Namespaces
	ListNamespace(ctx context.Context, in *ListNamespaceOptions, opts ...grpc.CallOption) (*NamespaceList, error)
	// DeleteNamespace deletes a Namespace
	DeleteNamespace(ctx context.Context, in *metav1.DeleteOptions, opts ...grpc.CallOption) (*metav1.OperationResult, error)
	// GetNamespace retrieves a specific Namespace
	GetNamespace(ctx context.Context, in *metav1.GetOptions, opts ...grpc.CallOption) (*Namespace, error)
	// CreateService creates a Service
	CreateService(ctx context.Context, in *Service, opts ...grpc.CallOption) (*Service, error)
	// ListService lists Services
	ListService(ctx context.Context, in *ListServiceOptions, opts ...grpc.CallOption) (*ServiceList, error)
	// UpdateService updates a Service
	UpdateService(ctx context.Context, in *Service, opts ...grpc.CallOption) (*Service, error)
	// DeleteService deletes a Service
	DeleteService(ctx context.Context, in *metav1.DeleteOptions, opts ...grpc.CallOption) (*metav1.OperationResult, error)
	// GetService retrieves a specific Service
	GetService(ctx context.Context, in *metav1.GetOptions, opts ...grpc.CallOption) (*Service, error)
	// ListSession lists Sessions
	ListSession(ctx context.Context, in *ListSessionOptions, opts ...grpc.CallOption) (*SessionList, error)
	// DeleteSession deletes a Session
	DeleteSession(ctx context.Context, in *metav1.DeleteOptions, opts ...grpc.CallOption) (*metav1.OperationResult, error)
	// GetSession retrieves a specific Session
	GetSession(ctx context.Context, in *metav1.GetOptions, opts ...grpc.CallOption) (*Session, error)
	// UpdateSession updates a Session
	UpdateSession(ctx context.Context, in *Session, opts ...grpc.CallOption) (*Session, error)
	// CreateSecret creates a Secret
	CreateSecret(ctx context.Context, in *Secret, opts ...grpc.CallOption) (*Secret, error)
	// ListSecret lists Secrets
	ListSecret(ctx context.Context, in *ListSecretOptions, opts ...grpc.CallOption) (*SecretList, error)
	// DeleteSecret deletes a Secret
	DeleteSecret(ctx context.Context, in *metav1.DeleteOptions, opts ...grpc.CallOption) (*metav1.OperationResult, error)
	// GetSecret retrieves a specific Secret
	GetSecret(ctx context.Context, in *metav1.GetOptions, opts ...grpc.CallOption) (*Secret, error)
	// UpdateSecret creates a Secret
	UpdateSecret(ctx context.Context, in *Secret, opts ...grpc.CallOption) (*Secret, error)
	// CreateGroup creates a Group
	CreateGroup(ctx context.Context, in *Group, opts ...grpc.CallOption) (*Group, error)
	// ListGroup lists Groups
	ListGroup(ctx context.Context, in *ListGroupOptions, opts ...grpc.CallOption) (*GroupList, error)
	// UpdateGroup updates a Group
	UpdateGroup(ctx context.Context, in *Group, opts ...grpc.CallOption) (*Group, error)
	// DeleteGroup deletes a Group
	DeleteGroup(ctx context.Context, in *metav1.DeleteOptions, opts ...grpc.CallOption) (*metav1.OperationResult, error)
	// GetGroup retrieves a specific Group
	GetGroup(ctx context.Context, in *metav1.GetOptions, opts ...grpc.CallOption) (*Group, error)
	// ListDevice lists Devices
	ListDevice(ctx context.Context, in *ListDeviceOptions, opts ...grpc.CallOption) (*DeviceList, error)
	// DeleteDevice deletes a Device
	DeleteDevice(ctx context.Context, in *metav1.DeleteOptions, opts ...grpc.CallOption) (*metav1.OperationResult, error)
	// GetDevice retrieves a specific Device
	GetDevice(ctx context.Context, in *metav1.GetOptions, opts ...grpc.CallOption) (*Device, error)
	// UpdateDevice updates a Device
	UpdateDevice(ctx context.Context, in *Device, opts ...grpc.CallOption) (*Device, error)
	// CreateCredential creates a Credential
	CreateCredential(ctx context.Context, in *Credential, opts ...grpc.CallOption) (*Credential, error)
	// UpdateCredential creates a Credential
	UpdateCredential(ctx context.Context, in *Credential, opts ...grpc.CallOption) (*Credential, error)
	// DeleteCredential deletes a Credential
	DeleteCredential(ctx context.Context, in *metav1.DeleteOptions, opts ...grpc.CallOption) (*metav1.OperationResult, error)
	// ListCredential lists Credentials
	ListCredential(ctx context.Context, in *ListCredentialOptions, opts ...grpc.CallOption) (*CredentialList, error)
	// GetCredential retrieves a specific Credential
	GetCredential(ctx context.Context, in *metav1.GetOptions, opts ...grpc.CallOption) (*Credential, error)
	// GenerateCredentialToken generates/rotates a Credential token
	GenerateCredentialToken(ctx context.Context, in *GenerateCredentialTokenRequest, opts ...grpc.CallOption) (*CredentialToken, error)
	// CreateIdentityProvider creates an IdentityProvider
	CreateIdentityProvider(ctx context.Context, in *IdentityProvider, opts ...grpc.CallOption) (*IdentityProvider, error)
	// GetIdentityProvider retrieves a specific IdentityProvider
	GetIdentityProvider(ctx context.Context, in *metav1.GetOptions, opts ...grpc.CallOption) (*IdentityProvider, error)
	// ListIdentityProvider lists IdentityProviders
	ListIdentityProvider(ctx context.Context, in *ListIdentityProviderOptions, opts ...grpc.CallOption) (*IdentityProviderList, error)
	// UpdateIdentityProvider updates an UpdateIdentityProvider
	UpdateIdentityProvider(ctx context.Context, in *IdentityProvider, opts ...grpc.CallOption) (*IdentityProvider, error)
	// DeleteIdentityProvider deletes an IdentityProvider
	DeleteIdentityProvider(ctx context.Context, in *metav1.DeleteOptions, opts ...grpc.CallOption) (*metav1.OperationResult, error)
	// GetRegion retrieves a specific Region
	GetRegion(ctx context.Context, in *metav1.GetOptions, opts ...grpc.CallOption) (*Region, error)
	// ListRegion lists Regions
	ListRegion(ctx context.Context, in *ListRegionOptions, opts ...grpc.CallOption) (*RegionList, error)
	// ListGateway lists Gateways
	ListGateway(ctx context.Context, in *ListGatewayOptions, opts ...grpc.CallOption) (*GatewayList, error)
	// GetGateway retrieves a specific Gateway
	GetGateway(ctx context.Context, in *metav1.GetOptions, opts ...grpc.CallOption) (*Gateway, error)
	// GetClusterConfig gets the Cluster Configuration.
	GetClusterConfig(ctx context.Context, in *GetClusterConfigRequest, opts ...grpc.CallOption) (*ClusterConfig, error)
	// UpdateConfig updates the Cluster Configuration.
	UpdateClusterConfig(ctx context.Context, in *ClusterConfig, opts ...grpc.CallOption) (*ClusterConfig, error)
}

type mainServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMainServiceClient(cc grpc.ClientConnInterface) MainServiceClient {
	return &mainServiceClient{cc}
}

func (c *mainServiceClient) CreatePolicy(ctx context.Context, in *Policy, opts ...grpc.CallOption) (*Policy, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Policy)
	err := c.cc.Invoke(ctx, MainService_CreatePolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainServiceClient) ListPolicy(ctx context.Context, in *ListPolicyOptions, opts ...grpc.CallOption) (*PolicyList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PolicyList)
	err := c.cc.Invoke(ctx, MainService_ListPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainServiceClient) UpdatePolicy(ctx context.Context, in *Policy, opts ...grpc.CallOption) (*Policy, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Policy)
	err := c.cc.Invoke(ctx, MainService_UpdatePolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainServiceClient) DeletePolicy(ctx context.Context, in *metav1.DeleteOptions, opts ...grpc.CallOption) (*metav1.OperationResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(metav1.OperationResult)
	err := c.cc.Invoke(ctx, MainService_DeletePolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainServiceClient) GetPolicy(ctx context.Context, in *metav1.GetOptions, opts ...grpc.CallOption) (*Policy, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Policy)
	err := c.cc.Invoke(ctx, MainService_GetPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainServiceClient) CreateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(User)
	err := c.cc.Invoke(ctx, MainService_CreateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainServiceClient) ListUser(ctx context.Context, in *ListUserOptions, opts ...grpc.CallOption) (*UserList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserList)
	err := c.cc.Invoke(ctx, MainService_ListUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainServiceClient) UpdateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(User)
	err := c.cc.Invoke(ctx, MainService_UpdateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainServiceClient) DeleteUser(ctx context.Context, in *metav1.DeleteOptions, opts ...grpc.CallOption) (*metav1.OperationResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(metav1.OperationResult)
	err := c.cc.Invoke(ctx, MainService_DeleteUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainServiceClient) GetUser(ctx context.Context, in *metav1.GetOptions, opts ...grpc.CallOption) (*User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(User)
	err := c.cc.Invoke(ctx, MainService_GetUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainServiceClient) CreateNamespace(ctx context.Context, in *Namespace, opts ...grpc.CallOption) (*Namespace, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Namespace)
	err := c.cc.Invoke(ctx, MainService_CreateNamespace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainServiceClient) UpdateNamespace(ctx context.Context, in *Namespace, opts ...grpc.CallOption) (*Namespace, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Namespace)
	err := c.cc.Invoke(ctx, MainService_UpdateNamespace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainServiceClient) ListNamespace(ctx context.Context, in *ListNamespaceOptions, opts ...grpc.CallOption) (*NamespaceList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NamespaceList)
	err := c.cc.Invoke(ctx, MainService_ListNamespace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainServiceClient) DeleteNamespace(ctx context.Context, in *metav1.DeleteOptions, opts ...grpc.CallOption) (*metav1.OperationResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(metav1.OperationResult)
	err := c.cc.Invoke(ctx, MainService_DeleteNamespace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainServiceClient) GetNamespace(ctx context.Context, in *metav1.GetOptions, opts ...grpc.CallOption) (*Namespace, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Namespace)
	err := c.cc.Invoke(ctx, MainService_GetNamespace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainServiceClient) CreateService(ctx context.Context, in *Service, opts ...grpc.CallOption) (*Service, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Service)
	err := c.cc.Invoke(ctx, MainService_CreateService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainServiceClient) ListService(ctx context.Context, in *ListServiceOptions, opts ...grpc.CallOption) (*ServiceList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ServiceList)
	err := c.cc.Invoke(ctx, MainService_ListService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainServiceClient) UpdateService(ctx context.Context, in *Service, opts ...grpc.CallOption) (*Service, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Service)
	err := c.cc.Invoke(ctx, MainService_UpdateService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainServiceClient) DeleteService(ctx context.Context, in *metav1.DeleteOptions, opts ...grpc.CallOption) (*metav1.OperationResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(metav1.OperationResult)
	err := c.cc.Invoke(ctx, MainService_DeleteService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainServiceClient) GetService(ctx context.Context, in *metav1.GetOptions, opts ...grpc.CallOption) (*Service, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Service)
	err := c.cc.Invoke(ctx, MainService_GetService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainServiceClient) ListSession(ctx context.Context, in *ListSessionOptions, opts ...grpc.CallOption) (*SessionList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SessionList)
	err := c.cc.Invoke(ctx, MainService_ListSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainServiceClient) DeleteSession(ctx context.Context, in *metav1.DeleteOptions, opts ...grpc.CallOption) (*metav1.OperationResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(metav1.OperationResult)
	err := c.cc.Invoke(ctx, MainService_DeleteSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainServiceClient) GetSession(ctx context.Context, in *metav1.GetOptions, opts ...grpc.CallOption) (*Session, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Session)
	err := c.cc.Invoke(ctx, MainService_GetSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainServiceClient) UpdateSession(ctx context.Context, in *Session, opts ...grpc.CallOption) (*Session, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Session)
	err := c.cc.Invoke(ctx, MainService_UpdateSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainServiceClient) CreateSecret(ctx context.Context, in *Secret, opts ...grpc.CallOption) (*Secret, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Secret)
	err := c.cc.Invoke(ctx, MainService_CreateSecret_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainServiceClient) ListSecret(ctx context.Context, in *ListSecretOptions, opts ...grpc.CallOption) (*SecretList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SecretList)
	err := c.cc.Invoke(ctx, MainService_ListSecret_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainServiceClient) DeleteSecret(ctx context.Context, in *metav1.DeleteOptions, opts ...grpc.CallOption) (*metav1.OperationResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(metav1.OperationResult)
	err := c.cc.Invoke(ctx, MainService_DeleteSecret_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainServiceClient) GetSecret(ctx context.Context, in *metav1.GetOptions, opts ...grpc.CallOption) (*Secret, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Secret)
	err := c.cc.Invoke(ctx, MainService_GetSecret_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainServiceClient) UpdateSecret(ctx context.Context, in *Secret, opts ...grpc.CallOption) (*Secret, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Secret)
	err := c.cc.Invoke(ctx, MainService_UpdateSecret_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainServiceClient) CreateGroup(ctx context.Context, in *Group, opts ...grpc.CallOption) (*Group, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Group)
	err := c.cc.Invoke(ctx, MainService_CreateGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainServiceClient) ListGroup(ctx context.Context, in *ListGroupOptions, opts ...grpc.CallOption) (*GroupList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GroupList)
	err := c.cc.Invoke(ctx, MainService_ListGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainServiceClient) UpdateGroup(ctx context.Context, in *Group, opts ...grpc.CallOption) (*Group, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Group)
	err := c.cc.Invoke(ctx, MainService_UpdateGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainServiceClient) DeleteGroup(ctx context.Context, in *metav1.DeleteOptions, opts ...grpc.CallOption) (*metav1.OperationResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(metav1.OperationResult)
	err := c.cc.Invoke(ctx, MainService_DeleteGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainServiceClient) GetGroup(ctx context.Context, in *metav1.GetOptions, opts ...grpc.CallOption) (*Group, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Group)
	err := c.cc.Invoke(ctx, MainService_GetGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainServiceClient) ListDevice(ctx context.Context, in *ListDeviceOptions, opts ...grpc.CallOption) (*DeviceList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeviceList)
	err := c.cc.Invoke(ctx, MainService_ListDevice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainServiceClient) DeleteDevice(ctx context.Context, in *metav1.DeleteOptions, opts ...grpc.CallOption) (*metav1.OperationResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(metav1.OperationResult)
	err := c.cc.Invoke(ctx, MainService_DeleteDevice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainServiceClient) GetDevice(ctx context.Context, in *metav1.GetOptions, opts ...grpc.CallOption) (*Device, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Device)
	err := c.cc.Invoke(ctx, MainService_GetDevice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainServiceClient) UpdateDevice(ctx context.Context, in *Device, opts ...grpc.CallOption) (*Device, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Device)
	err := c.cc.Invoke(ctx, MainService_UpdateDevice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainServiceClient) CreateCredential(ctx context.Context, in *Credential, opts ...grpc.CallOption) (*Credential, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Credential)
	err := c.cc.Invoke(ctx, MainService_CreateCredential_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainServiceClient) UpdateCredential(ctx context.Context, in *Credential, opts ...grpc.CallOption) (*Credential, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Credential)
	err := c.cc.Invoke(ctx, MainService_UpdateCredential_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainServiceClient) DeleteCredential(ctx context.Context, in *metav1.DeleteOptions, opts ...grpc.CallOption) (*metav1.OperationResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(metav1.OperationResult)
	err := c.cc.Invoke(ctx, MainService_DeleteCredential_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainServiceClient) ListCredential(ctx context.Context, in *ListCredentialOptions, opts ...grpc.CallOption) (*CredentialList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CredentialList)
	err := c.cc.Invoke(ctx, MainService_ListCredential_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainServiceClient) GetCredential(ctx context.Context, in *metav1.GetOptions, opts ...grpc.CallOption) (*Credential, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Credential)
	err := c.cc.Invoke(ctx, MainService_GetCredential_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainServiceClient) GenerateCredentialToken(ctx context.Context, in *GenerateCredentialTokenRequest, opts ...grpc.CallOption) (*CredentialToken, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CredentialToken)
	err := c.cc.Invoke(ctx, MainService_GenerateCredentialToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainServiceClient) CreateIdentityProvider(ctx context.Context, in *IdentityProvider, opts ...grpc.CallOption) (*IdentityProvider, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentityProvider)
	err := c.cc.Invoke(ctx, MainService_CreateIdentityProvider_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainServiceClient) GetIdentityProvider(ctx context.Context, in *metav1.GetOptions, opts ...grpc.CallOption) (*IdentityProvider, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentityProvider)
	err := c.cc.Invoke(ctx, MainService_GetIdentityProvider_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainServiceClient) ListIdentityProvider(ctx context.Context, in *ListIdentityProviderOptions, opts ...grpc.CallOption) (*IdentityProviderList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentityProviderList)
	err := c.cc.Invoke(ctx, MainService_ListIdentityProvider_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainServiceClient) UpdateIdentityProvider(ctx context.Context, in *IdentityProvider, opts ...grpc.CallOption) (*IdentityProvider, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentityProvider)
	err := c.cc.Invoke(ctx, MainService_UpdateIdentityProvider_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainServiceClient) DeleteIdentityProvider(ctx context.Context, in *metav1.DeleteOptions, opts ...grpc.CallOption) (*metav1.OperationResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(metav1.OperationResult)
	err := c.cc.Invoke(ctx, MainService_DeleteIdentityProvider_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainServiceClient) GetRegion(ctx context.Context, in *metav1.GetOptions, opts ...grpc.CallOption) (*Region, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Region)
	err := c.cc.Invoke(ctx, MainService_GetRegion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainServiceClient) ListRegion(ctx context.Context, in *ListRegionOptions, opts ...grpc.CallOption) (*RegionList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegionList)
	err := c.cc.Invoke(ctx, MainService_ListRegion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainServiceClient) ListGateway(ctx context.Context, in *ListGatewayOptions, opts ...grpc.CallOption) (*GatewayList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GatewayList)
	err := c.cc.Invoke(ctx, MainService_ListGateway_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainServiceClient) GetGateway(ctx context.Context, in *metav1.GetOptions, opts ...grpc.CallOption) (*Gateway, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Gateway)
	err := c.cc.Invoke(ctx, MainService_GetGateway_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainServiceClient) GetClusterConfig(ctx context.Context, in *GetClusterConfigRequest, opts ...grpc.CallOption) (*ClusterConfig, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClusterConfig)
	err := c.cc.Invoke(ctx, MainService_GetClusterConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainServiceClient) UpdateClusterConfig(ctx context.Context, in *ClusterConfig, opts ...grpc.CallOption) (*ClusterConfig, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClusterConfig)
	err := c.cc.Invoke(ctx, MainService_UpdateClusterConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MainServiceServer is the server API for MainService service.
// All implementations must embed UnimplementedMainServiceServer
// for forward compatibility.
type MainServiceServer interface {
	// CreatePolicy creates a Policy
	CreatePolicy(context.Context, *Policy) (*Policy, error)
	// ListPolicy lists Policy
	ListPolicy(context.Context, *ListPolicyOptions) (*PolicyList, error)
	// UpdatePolicy updates a Policy
	UpdatePolicy(context.Context, *Policy) (*Policy, error)
	// DeletePolicy deletes a Policy
	DeletePolicy(context.Context, *metav1.DeleteOptions) (*metav1.OperationResult, error)
	// GetPolicy retrieves a specific Policy
	GetPolicy(context.Context, *metav1.GetOptions) (*Policy, error)
	// CreateUser creates a User
	CreateUser(context.Context, *User) (*User, error)
	// ListUser lists Users
	ListUser(context.Context, *ListUserOptions) (*UserList, error)
	// UpdateUser updates a User
	UpdateUser(context.Context, *User) (*User, error)
	// DeleteUser deletes a User
	DeleteUser(context.Context, *metav1.DeleteOptions) (*metav1.OperationResult, error)
	// GetUser retrieves a specific User
	GetUser(context.Context, *metav1.GetOptions) (*User, error)
	// CreateNamespace creates a Namespace
	CreateNamespace(context.Context, *Namespace) (*Namespace, error)
	// UpdateNamespace updates a Namespace
	UpdateNamespace(context.Context, *Namespace) (*Namespace, error)
	// ListNamespace lists Namespaces
	ListNamespace(context.Context, *ListNamespaceOptions) (*NamespaceList, error)
	// DeleteNamespace deletes a Namespace
	DeleteNamespace(context.Context, *metav1.DeleteOptions) (*metav1.OperationResult, error)
	// GetNamespace retrieves a specific Namespace
	GetNamespace(context.Context, *metav1.GetOptions) (*Namespace, error)
	// CreateService creates a Service
	CreateService(context.Context, *Service) (*Service, error)
	// ListService lists Services
	ListService(context.Context, *ListServiceOptions) (*ServiceList, error)
	// UpdateService updates a Service
	UpdateService(context.Context, *Service) (*Service, error)
	// DeleteService deletes a Service
	DeleteService(context.Context, *metav1.DeleteOptions) (*metav1.OperationResult, error)
	// GetService retrieves a specific Service
	GetService(context.Context, *metav1.GetOptions) (*Service, error)
	// ListSession lists Sessions
	ListSession(context.Context, *ListSessionOptions) (*SessionList, error)
	// DeleteSession deletes a Session
	DeleteSession(context.Context, *metav1.DeleteOptions) (*metav1.OperationResult, error)
	// GetSession retrieves a specific Session
	GetSession(context.Context, *metav1.GetOptions) (*Session, error)
	// UpdateSession updates a Session
	UpdateSession(context.Context, *Session) (*Session, error)
	// CreateSecret creates a Secret
	CreateSecret(context.Context, *Secret) (*Secret, error)
	// ListSecret lists Secrets
	ListSecret(context.Context, *ListSecretOptions) (*SecretList, error)
	// DeleteSecret deletes a Secret
	DeleteSecret(context.Context, *metav1.DeleteOptions) (*metav1.OperationResult, error)
	// GetSecret retrieves a specific Secret
	GetSecret(context.Context, *metav1.GetOptions) (*Secret, error)
	// UpdateSecret creates a Secret
	UpdateSecret(context.Context, *Secret) (*Secret, error)
	// CreateGroup creates a Group
	CreateGroup(context.Context, *Group) (*Group, error)
	// ListGroup lists Groups
	ListGroup(context.Context, *ListGroupOptions) (*GroupList, error)
	// UpdateGroup updates a Group
	UpdateGroup(context.Context, *Group) (*Group, error)
	// DeleteGroup deletes a Group
	DeleteGroup(context.Context, *metav1.DeleteOptions) (*metav1.OperationResult, error)
	// GetGroup retrieves a specific Group
	GetGroup(context.Context, *metav1.GetOptions) (*Group, error)
	// ListDevice lists Devices
	ListDevice(context.Context, *ListDeviceOptions) (*DeviceList, error)
	// DeleteDevice deletes a Device
	DeleteDevice(context.Context, *metav1.DeleteOptions) (*metav1.OperationResult, error)
	// GetDevice retrieves a specific Device
	GetDevice(context.Context, *metav1.GetOptions) (*Device, error)
	// UpdateDevice updates a Device
	UpdateDevice(context.Context, *Device) (*Device, error)
	// CreateCredential creates a Credential
	CreateCredential(context.Context, *Credential) (*Credential, error)
	// UpdateCredential creates a Credential
	UpdateCredential(context.Context, *Credential) (*Credential, error)
	// DeleteCredential deletes a Credential
	DeleteCredential(context.Context, *metav1.DeleteOptions) (*metav1.OperationResult, error)
	// ListCredential lists Credentials
	ListCredential(context.Context, *ListCredentialOptions) (*CredentialList, error)
	// GetCredential retrieves a specific Credential
	GetCredential(context.Context, *metav1.GetOptions) (*Credential, error)
	// GenerateCredentialToken generates/rotates a Credential token
	GenerateCredentialToken(context.Context, *GenerateCredentialTokenRequest) (*CredentialToken, error)
	// CreateIdentityProvider creates an IdentityProvider
	CreateIdentityProvider(context.Context, *IdentityProvider) (*IdentityProvider, error)
	// GetIdentityProvider retrieves a specific IdentityProvider
	GetIdentityProvider(context.Context, *metav1.GetOptions) (*IdentityProvider, error)
	// ListIdentityProvider lists IdentityProviders
	ListIdentityProvider(context.Context, *ListIdentityProviderOptions) (*IdentityProviderList, error)
	// UpdateIdentityProvider updates an UpdateIdentityProvider
	UpdateIdentityProvider(context.Context, *IdentityProvider) (*IdentityProvider, error)
	// DeleteIdentityProvider deletes an IdentityProvider
	DeleteIdentityProvider(context.Context, *metav1.DeleteOptions) (*metav1.OperationResult, error)
	// GetRegion retrieves a specific Region
	GetRegion(context.Context, *metav1.GetOptions) (*Region, error)
	// ListRegion lists Regions
	ListRegion(context.Context, *ListRegionOptions) (*RegionList, error)
	// ListGateway lists Gateways
	ListGateway(context.Context, *ListGatewayOptions) (*GatewayList, error)
	// GetGateway retrieves a specific Gateway
	GetGateway(context.Context, *metav1.GetOptions) (*Gateway, error)
	// GetClusterConfig gets the Cluster Configuration.
	GetClusterConfig(context.Context, *GetClusterConfigRequest) (*ClusterConfig, error)
	// UpdateConfig updates the Cluster Configuration.
	UpdateClusterConfig(context.Context, *ClusterConfig) (*ClusterConfig, error)
	mustEmbedUnimplementedMainServiceServer()
}

// UnimplementedMainServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMainServiceServer struct{}

func (UnimplementedMainServiceServer) CreatePolicy(context.Context, *Policy) (*Policy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePolicy not implemented")
}
func (UnimplementedMainServiceServer) ListPolicy(context.Context, *ListPolicyOptions) (*PolicyList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPolicy not implemented")
}
func (UnimplementedMainServiceServer) UpdatePolicy(context.Context, *Policy) (*Policy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePolicy not implemented")
}
func (UnimplementedMainServiceServer) DeletePolicy(context.Context, *metav1.DeleteOptions) (*metav1.OperationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePolicy not implemented")
}
func (UnimplementedMainServiceServer) GetPolicy(context.Context, *metav1.GetOptions) (*Policy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPolicy not implemented")
}
func (UnimplementedMainServiceServer) CreateUser(context.Context, *User) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedMainServiceServer) ListUser(context.Context, *ListUserOptions) (*UserList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUser not implemented")
}
func (UnimplementedMainServiceServer) UpdateUser(context.Context, *User) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedMainServiceServer) DeleteUser(context.Context, *metav1.DeleteOptions) (*metav1.OperationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedMainServiceServer) GetUser(context.Context, *metav1.GetOptions) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedMainServiceServer) CreateNamespace(context.Context, *Namespace) (*Namespace, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNamespace not implemented")
}
func (UnimplementedMainServiceServer) UpdateNamespace(context.Context, *Namespace) (*Namespace, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNamespace not implemented")
}
func (UnimplementedMainServiceServer) ListNamespace(context.Context, *ListNamespaceOptions) (*NamespaceList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNamespace not implemented")
}
func (UnimplementedMainServiceServer) DeleteNamespace(context.Context, *metav1.DeleteOptions) (*metav1.OperationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNamespace not implemented")
}
func (UnimplementedMainServiceServer) GetNamespace(context.Context, *metav1.GetOptions) (*Namespace, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNamespace not implemented")
}
func (UnimplementedMainServiceServer) CreateService(context.Context, *Service) (*Service, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateService not implemented")
}
func (UnimplementedMainServiceServer) ListService(context.Context, *ListServiceOptions) (*ServiceList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListService not implemented")
}
func (UnimplementedMainServiceServer) UpdateService(context.Context, *Service) (*Service, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateService not implemented")
}
func (UnimplementedMainServiceServer) DeleteService(context.Context, *metav1.DeleteOptions) (*metav1.OperationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteService not implemented")
}
func (UnimplementedMainServiceServer) GetService(context.Context, *metav1.GetOptions) (*Service, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetService not implemented")
}
func (UnimplementedMainServiceServer) ListSession(context.Context, *ListSessionOptions) (*SessionList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSession not implemented")
}
func (UnimplementedMainServiceServer) DeleteSession(context.Context, *metav1.DeleteOptions) (*metav1.OperationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSession not implemented")
}
func (UnimplementedMainServiceServer) GetSession(context.Context, *metav1.GetOptions) (*Session, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSession not implemented")
}
func (UnimplementedMainServiceServer) UpdateSession(context.Context, *Session) (*Session, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSession not implemented")
}
func (UnimplementedMainServiceServer) CreateSecret(context.Context, *Secret) (*Secret, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSecret not implemented")
}
func (UnimplementedMainServiceServer) ListSecret(context.Context, *ListSecretOptions) (*SecretList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSecret not implemented")
}
func (UnimplementedMainServiceServer) DeleteSecret(context.Context, *metav1.DeleteOptions) (*metav1.OperationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSecret not implemented")
}
func (UnimplementedMainServiceServer) GetSecret(context.Context, *metav1.GetOptions) (*Secret, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSecret not implemented")
}
func (UnimplementedMainServiceServer) UpdateSecret(context.Context, *Secret) (*Secret, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSecret not implemented")
}
func (UnimplementedMainServiceServer) CreateGroup(context.Context, *Group) (*Group, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}
func (UnimplementedMainServiceServer) ListGroup(context.Context, *ListGroupOptions) (*GroupList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGroup not implemented")
}
func (UnimplementedMainServiceServer) UpdateGroup(context.Context, *Group) (*Group, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroup not implemented")
}
func (UnimplementedMainServiceServer) DeleteGroup(context.Context, *metav1.DeleteOptions) (*metav1.OperationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroup not implemented")
}
func (UnimplementedMainServiceServer) GetGroup(context.Context, *metav1.GetOptions) (*Group, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroup not implemented")
}
func (UnimplementedMainServiceServer) ListDevice(context.Context, *ListDeviceOptions) (*DeviceList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDevice not implemented")
}
func (UnimplementedMainServiceServer) DeleteDevice(context.Context, *metav1.DeleteOptions) (*metav1.OperationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDevice not implemented")
}
func (UnimplementedMainServiceServer) GetDevice(context.Context, *metav1.GetOptions) (*Device, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDevice not implemented")
}
func (UnimplementedMainServiceServer) UpdateDevice(context.Context, *Device) (*Device, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDevice not implemented")
}
func (UnimplementedMainServiceServer) CreateCredential(context.Context, *Credential) (*Credential, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCredential not implemented")
}
func (UnimplementedMainServiceServer) UpdateCredential(context.Context, *Credential) (*Credential, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCredential not implemented")
}
func (UnimplementedMainServiceServer) DeleteCredential(context.Context, *metav1.DeleteOptions) (*metav1.OperationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCredential not implemented")
}
func (UnimplementedMainServiceServer) ListCredential(context.Context, *ListCredentialOptions) (*CredentialList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCredential not implemented")
}
func (UnimplementedMainServiceServer) GetCredential(context.Context, *metav1.GetOptions) (*Credential, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCredential not implemented")
}
func (UnimplementedMainServiceServer) GenerateCredentialToken(context.Context, *GenerateCredentialTokenRequest) (*CredentialToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateCredentialToken not implemented")
}
func (UnimplementedMainServiceServer) CreateIdentityProvider(context.Context, *IdentityProvider) (*IdentityProvider, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIdentityProvider not implemented")
}
func (UnimplementedMainServiceServer) GetIdentityProvider(context.Context, *metav1.GetOptions) (*IdentityProvider, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIdentityProvider not implemented")
}
func (UnimplementedMainServiceServer) ListIdentityProvider(context.Context, *ListIdentityProviderOptions) (*IdentityProviderList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIdentityProvider not implemented")
}
func (UnimplementedMainServiceServer) UpdateIdentityProvider(context.Context, *IdentityProvider) (*IdentityProvider, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIdentityProvider not implemented")
}
func (UnimplementedMainServiceServer) DeleteIdentityProvider(context.Context, *metav1.DeleteOptions) (*metav1.OperationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIdentityProvider not implemented")
}
func (UnimplementedMainServiceServer) GetRegion(context.Context, *metav1.GetOptions) (*Region, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRegion not implemented")
}
func (UnimplementedMainServiceServer) ListRegion(context.Context, *ListRegionOptions) (*RegionList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRegion not implemented")
}
func (UnimplementedMainServiceServer) ListGateway(context.Context, *ListGatewayOptions) (*GatewayList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGateway not implemented")
}
func (UnimplementedMainServiceServer) GetGateway(context.Context, *metav1.GetOptions) (*Gateway, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGateway not implemented")
}
func (UnimplementedMainServiceServer) GetClusterConfig(context.Context, *GetClusterConfigRequest) (*ClusterConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusterConfig not implemented")
}
func (UnimplementedMainServiceServer) UpdateClusterConfig(context.Context, *ClusterConfig) (*ClusterConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateClusterConfig not implemented")
}
func (UnimplementedMainServiceServer) mustEmbedUnimplementedMainServiceServer() {}
func (UnimplementedMainServiceServer) testEmbeddedByValue()                     {}

// UnsafeMainServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MainServiceServer will
// result in compilation errors.
type UnsafeMainServiceServer interface {
	mustEmbedUnimplementedMainServiceServer()
}

func RegisterMainServiceServer(s grpc.ServiceRegistrar, srv MainServiceServer) {
	// If the following call pancis, it indicates UnimplementedMainServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MainService_ServiceDesc, srv)
}

func _MainService_CreatePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Policy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServiceServer).CreatePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MainService_CreatePolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServiceServer).CreatePolicy(ctx, req.(*Policy))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainService_ListPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPolicyOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServiceServer).ListPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MainService_ListPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServiceServer).ListPolicy(ctx, req.(*ListPolicyOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainService_UpdatePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Policy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServiceServer).UpdatePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MainService_UpdatePolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServiceServer).UpdatePolicy(ctx, req.(*Policy))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainService_DeletePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(metav1.DeleteOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServiceServer).DeletePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MainService_DeletePolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServiceServer).DeletePolicy(ctx, req.(*metav1.DeleteOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainService_GetPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(metav1.GetOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServiceServer).GetPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MainService_GetPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServiceServer).GetPolicy(ctx, req.(*metav1.GetOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MainService_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServiceServer).CreateUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainService_ListUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServiceServer).ListUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MainService_ListUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServiceServer).ListUser(ctx, req.(*ListUserOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MainService_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServiceServer).UpdateUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(metav1.DeleteOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MainService_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServiceServer).DeleteUser(ctx, req.(*metav1.DeleteOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(metav1.GetOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MainService_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServiceServer).GetUser(ctx, req.(*metav1.GetOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainService_CreateNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Namespace)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServiceServer).CreateNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MainService_CreateNamespace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServiceServer).CreateNamespace(ctx, req.(*Namespace))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainService_UpdateNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Namespace)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServiceServer).UpdateNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MainService_UpdateNamespace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServiceServer).UpdateNamespace(ctx, req.(*Namespace))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainService_ListNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNamespaceOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServiceServer).ListNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MainService_ListNamespace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServiceServer).ListNamespace(ctx, req.(*ListNamespaceOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainService_DeleteNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(metav1.DeleteOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServiceServer).DeleteNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MainService_DeleteNamespace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServiceServer).DeleteNamespace(ctx, req.(*metav1.DeleteOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainService_GetNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(metav1.GetOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServiceServer).GetNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MainService_GetNamespace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServiceServer).GetNamespace(ctx, req.(*metav1.GetOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainService_CreateService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Service)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServiceServer).CreateService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MainService_CreateService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServiceServer).CreateService(ctx, req.(*Service))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainService_ListService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServiceOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServiceServer).ListService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MainService_ListService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServiceServer).ListService(ctx, req.(*ListServiceOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainService_UpdateService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Service)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServiceServer).UpdateService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MainService_UpdateService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServiceServer).UpdateService(ctx, req.(*Service))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainService_DeleteService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(metav1.DeleteOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServiceServer).DeleteService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MainService_DeleteService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServiceServer).DeleteService(ctx, req.(*metav1.DeleteOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainService_GetService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(metav1.GetOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServiceServer).GetService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MainService_GetService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServiceServer).GetService(ctx, req.(*metav1.GetOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainService_ListSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSessionOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServiceServer).ListSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MainService_ListSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServiceServer).ListSession(ctx, req.(*ListSessionOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainService_DeleteSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(metav1.DeleteOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServiceServer).DeleteSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MainService_DeleteSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServiceServer).DeleteSession(ctx, req.(*metav1.DeleteOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainService_GetSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(metav1.GetOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServiceServer).GetSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MainService_GetSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServiceServer).GetSession(ctx, req.(*metav1.GetOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainService_UpdateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Session)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServiceServer).UpdateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MainService_UpdateSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServiceServer).UpdateSession(ctx, req.(*Session))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainService_CreateSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Secret)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServiceServer).CreateSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MainService_CreateSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServiceServer).CreateSecret(ctx, req.(*Secret))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainService_ListSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSecretOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServiceServer).ListSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MainService_ListSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServiceServer).ListSecret(ctx, req.(*ListSecretOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainService_DeleteSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(metav1.DeleteOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServiceServer).DeleteSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MainService_DeleteSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServiceServer).DeleteSecret(ctx, req.(*metav1.DeleteOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainService_GetSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(metav1.GetOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServiceServer).GetSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MainService_GetSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServiceServer).GetSecret(ctx, req.(*metav1.GetOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainService_UpdateSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Secret)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServiceServer).UpdateSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MainService_UpdateSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServiceServer).UpdateSecret(ctx, req.(*Secret))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainService_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Group)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServiceServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MainService_CreateGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServiceServer).CreateGroup(ctx, req.(*Group))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainService_ListGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGroupOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServiceServer).ListGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MainService_ListGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServiceServer).ListGroup(ctx, req.(*ListGroupOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainService_UpdateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Group)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServiceServer).UpdateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MainService_UpdateGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServiceServer).UpdateGroup(ctx, req.(*Group))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainService_DeleteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(metav1.DeleteOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServiceServer).DeleteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MainService_DeleteGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServiceServer).DeleteGroup(ctx, req.(*metav1.DeleteOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainService_GetGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(metav1.GetOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServiceServer).GetGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MainService_GetGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServiceServer).GetGroup(ctx, req.(*metav1.GetOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainService_ListDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDeviceOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServiceServer).ListDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MainService_ListDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServiceServer).ListDevice(ctx, req.(*ListDeviceOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainService_DeleteDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(metav1.DeleteOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServiceServer).DeleteDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MainService_DeleteDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServiceServer).DeleteDevice(ctx, req.(*metav1.DeleteOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainService_GetDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(metav1.GetOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServiceServer).GetDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MainService_GetDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServiceServer).GetDevice(ctx, req.(*metav1.GetOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainService_UpdateDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Device)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServiceServer).UpdateDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MainService_UpdateDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServiceServer).UpdateDevice(ctx, req.(*Device))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainService_CreateCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Credential)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServiceServer).CreateCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MainService_CreateCredential_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServiceServer).CreateCredential(ctx, req.(*Credential))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainService_UpdateCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Credential)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServiceServer).UpdateCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MainService_UpdateCredential_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServiceServer).UpdateCredential(ctx, req.(*Credential))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainService_DeleteCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(metav1.DeleteOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServiceServer).DeleteCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MainService_DeleteCredential_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServiceServer).DeleteCredential(ctx, req.(*metav1.DeleteOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainService_ListCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCredentialOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServiceServer).ListCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MainService_ListCredential_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServiceServer).ListCredential(ctx, req.(*ListCredentialOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainService_GetCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(metav1.GetOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServiceServer).GetCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MainService_GetCredential_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServiceServer).GetCredential(ctx, req.(*metav1.GetOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainService_GenerateCredentialToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateCredentialTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServiceServer).GenerateCredentialToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MainService_GenerateCredentialToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServiceServer).GenerateCredentialToken(ctx, req.(*GenerateCredentialTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainService_CreateIdentityProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdentityProvider)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServiceServer).CreateIdentityProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MainService_CreateIdentityProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServiceServer).CreateIdentityProvider(ctx, req.(*IdentityProvider))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainService_GetIdentityProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(metav1.GetOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServiceServer).GetIdentityProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MainService_GetIdentityProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServiceServer).GetIdentityProvider(ctx, req.(*metav1.GetOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainService_ListIdentityProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIdentityProviderOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServiceServer).ListIdentityProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MainService_ListIdentityProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServiceServer).ListIdentityProvider(ctx, req.(*ListIdentityProviderOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainService_UpdateIdentityProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdentityProvider)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServiceServer).UpdateIdentityProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MainService_UpdateIdentityProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServiceServer).UpdateIdentityProvider(ctx, req.(*IdentityProvider))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainService_DeleteIdentityProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(metav1.DeleteOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServiceServer).DeleteIdentityProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MainService_DeleteIdentityProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServiceServer).DeleteIdentityProvider(ctx, req.(*metav1.DeleteOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainService_GetRegion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(metav1.GetOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServiceServer).GetRegion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MainService_GetRegion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServiceServer).GetRegion(ctx, req.(*metav1.GetOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainService_ListRegion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRegionOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServiceServer).ListRegion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MainService_ListRegion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServiceServer).ListRegion(ctx, req.(*ListRegionOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainService_ListGateway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGatewayOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServiceServer).ListGateway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MainService_ListGateway_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServiceServer).ListGateway(ctx, req.(*ListGatewayOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainService_GetGateway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(metav1.GetOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServiceServer).GetGateway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MainService_GetGateway_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServiceServer).GetGateway(ctx, req.(*metav1.GetOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainService_GetClusterConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClusterConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServiceServer).GetClusterConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MainService_GetClusterConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServiceServer).GetClusterConfig(ctx, req.(*GetClusterConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainService_UpdateClusterConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServiceServer).UpdateClusterConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MainService_UpdateClusterConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServiceServer).UpdateClusterConfig(ctx, req.(*ClusterConfig))
	}
	return interceptor(ctx, in, info, handler)
}

// MainService_ServiceDesc is the grpc.ServiceDesc for MainService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MainService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "octelium.api.main.core.v1.MainService",
	HandlerType: (*MainServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePolicy",
			Handler:    _MainService_CreatePolicy_Handler,
		},
		{
			MethodName: "ListPolicy",
			Handler:    _MainService_ListPolicy_Handler,
		},
		{
			MethodName: "UpdatePolicy",
			Handler:    _MainService_UpdatePolicy_Handler,
		},
		{
			MethodName: "DeletePolicy",
			Handler:    _MainService_DeletePolicy_Handler,
		},
		{
			MethodName: "GetPolicy",
			Handler:    _MainService_GetPolicy_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _MainService_CreateUser_Handler,
		},
		{
			MethodName: "ListUser",
			Handler:    _MainService_ListUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _MainService_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _MainService_DeleteUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _MainService_GetUser_Handler,
		},
		{
			MethodName: "CreateNamespace",
			Handler:    _MainService_CreateNamespace_Handler,
		},
		{
			MethodName: "UpdateNamespace",
			Handler:    _MainService_UpdateNamespace_Handler,
		},
		{
			MethodName: "ListNamespace",
			Handler:    _MainService_ListNamespace_Handler,
		},
		{
			MethodName: "DeleteNamespace",
			Handler:    _MainService_DeleteNamespace_Handler,
		},
		{
			MethodName: "GetNamespace",
			Handler:    _MainService_GetNamespace_Handler,
		},
		{
			MethodName: "CreateService",
			Handler:    _MainService_CreateService_Handler,
		},
		{
			MethodName: "ListService",
			Handler:    _MainService_ListService_Handler,
		},
		{
			MethodName: "UpdateService",
			Handler:    _MainService_UpdateService_Handler,
		},
		{
			MethodName: "DeleteService",
			Handler:    _MainService_DeleteService_Handler,
		},
		{
			MethodName: "GetService",
			Handler:    _MainService_GetService_Handler,
		},
		{
			MethodName: "ListSession",
			Handler:    _MainService_ListSession_Handler,
		},
		{
			MethodName: "DeleteSession",
			Handler:    _MainService_DeleteSession_Handler,
		},
		{
			MethodName: "GetSession",
			Handler:    _MainService_GetSession_Handler,
		},
		{
			MethodName: "UpdateSession",
			Handler:    _MainService_UpdateSession_Handler,
		},
		{
			MethodName: "CreateSecret",
			Handler:    _MainService_CreateSecret_Handler,
		},
		{
			MethodName: "ListSecret",
			Handler:    _MainService_ListSecret_Handler,
		},
		{
			MethodName: "DeleteSecret",
			Handler:    _MainService_DeleteSecret_Handler,
		},
		{
			MethodName: "GetSecret",
			Handler:    _MainService_GetSecret_Handler,
		},
		{
			MethodName: "UpdateSecret",
			Handler:    _MainService_UpdateSecret_Handler,
		},
		{
			MethodName: "CreateGroup",
			Handler:    _MainService_CreateGroup_Handler,
		},
		{
			MethodName: "ListGroup",
			Handler:    _MainService_ListGroup_Handler,
		},
		{
			MethodName: "UpdateGroup",
			Handler:    _MainService_UpdateGroup_Handler,
		},
		{
			MethodName: "DeleteGroup",
			Handler:    _MainService_DeleteGroup_Handler,
		},
		{
			MethodName: "GetGroup",
			Handler:    _MainService_GetGroup_Handler,
		},
		{
			MethodName: "ListDevice",
			Handler:    _MainService_ListDevice_Handler,
		},
		{
			MethodName: "DeleteDevice",
			Handler:    _MainService_DeleteDevice_Handler,
		},
		{
			MethodName: "GetDevice",
			Handler:    _MainService_GetDevice_Handler,
		},
		{
			MethodName: "UpdateDevice",
			Handler:    _MainService_UpdateDevice_Handler,
		},
		{
			MethodName: "CreateCredential",
			Handler:    _MainService_CreateCredential_Handler,
		},
		{
			MethodName: "UpdateCredential",
			Handler:    _MainService_UpdateCredential_Handler,
		},
		{
			MethodName: "DeleteCredential",
			Handler:    _MainService_DeleteCredential_Handler,
		},
		{
			MethodName: "ListCredential",
			Handler:    _MainService_ListCredential_Handler,
		},
		{
			MethodName: "GetCredential",
			Handler:    _MainService_GetCredential_Handler,
		},
		{
			MethodName: "GenerateCredentialToken",
			Handler:    _MainService_GenerateCredentialToken_Handler,
		},
		{
			MethodName: "CreateIdentityProvider",
			Handler:    _MainService_CreateIdentityProvider_Handler,
		},
		{
			MethodName: "GetIdentityProvider",
			Handler:    _MainService_GetIdentityProvider_Handler,
		},
		{
			MethodName: "ListIdentityProvider",
			Handler:    _MainService_ListIdentityProvider_Handler,
		},
		{
			MethodName: "UpdateIdentityProvider",
			Handler:    _MainService_UpdateIdentityProvider_Handler,
		},
		{
			MethodName: "DeleteIdentityProvider",
			Handler:    _MainService_DeleteIdentityProvider_Handler,
		},
		{
			MethodName: "GetRegion",
			Handler:    _MainService_GetRegion_Handler,
		},
		{
			MethodName: "ListRegion",
			Handler:    _MainService_ListRegion_Handler,
		},
		{
			MethodName: "ListGateway",
			Handler:    _MainService_ListGateway_Handler,
		},
		{
			MethodName: "GetGateway",
			Handler:    _MainService_GetGateway_Handler,
		},
		{
			MethodName: "GetClusterConfig",
			Handler:    _MainService_GetClusterConfig_Handler,
		},
		{
			MethodName: "UpdateClusterConfig",
			Handler:    _MainService_UpdateClusterConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "corev1.proto",
}
