// Copyright Octelium Labs, LLC. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: rcorev1.proto

package rcorev1

import (
	context "context"
	corev1 "github.com/octelium/octelium/apis/main/corev1"
	rmetav1 "github.com/octelium/octelium/apis/rsc/rmetav1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ResourceService_GetClusterConfig_FullMethodName       = "/octelium.api.rsc.core.v1.ResourceService/GetClusterConfig"
	ResourceService_UpdateClusterConfig_FullMethodName    = "/octelium.api.rsc.core.v1.ResourceService/UpdateClusterConfig"
	ResourceService_WatchClusterConfig_FullMethodName     = "/octelium.api.rsc.core.v1.ResourceService/WatchClusterConfig"
	ResourceService_CreatePolicy_FullMethodName           = "/octelium.api.rsc.core.v1.ResourceService/CreatePolicy"
	ResourceService_UpdatePolicy_FullMethodName           = "/octelium.api.rsc.core.v1.ResourceService/UpdatePolicy"
	ResourceService_GetPolicy_FullMethodName              = "/octelium.api.rsc.core.v1.ResourceService/GetPolicy"
	ResourceService_ListPolicy_FullMethodName             = "/octelium.api.rsc.core.v1.ResourceService/ListPolicy"
	ResourceService_DeletePolicy_FullMethodName           = "/octelium.api.rsc.core.v1.ResourceService/DeletePolicy"
	ResourceService_WatchPolicy_FullMethodName            = "/octelium.api.rsc.core.v1.ResourceService/WatchPolicy"
	ResourceService_CreateUser_FullMethodName             = "/octelium.api.rsc.core.v1.ResourceService/CreateUser"
	ResourceService_UpdateUser_FullMethodName             = "/octelium.api.rsc.core.v1.ResourceService/UpdateUser"
	ResourceService_GetUser_FullMethodName                = "/octelium.api.rsc.core.v1.ResourceService/GetUser"
	ResourceService_ListUser_FullMethodName               = "/octelium.api.rsc.core.v1.ResourceService/ListUser"
	ResourceService_DeleteUser_FullMethodName             = "/octelium.api.rsc.core.v1.ResourceService/DeleteUser"
	ResourceService_WatchUser_FullMethodName              = "/octelium.api.rsc.core.v1.ResourceService/WatchUser"
	ResourceService_CreateGroup_FullMethodName            = "/octelium.api.rsc.core.v1.ResourceService/CreateGroup"
	ResourceService_UpdateGroup_FullMethodName            = "/octelium.api.rsc.core.v1.ResourceService/UpdateGroup"
	ResourceService_GetGroup_FullMethodName               = "/octelium.api.rsc.core.v1.ResourceService/GetGroup"
	ResourceService_ListGroup_FullMethodName              = "/octelium.api.rsc.core.v1.ResourceService/ListGroup"
	ResourceService_DeleteGroup_FullMethodName            = "/octelium.api.rsc.core.v1.ResourceService/DeleteGroup"
	ResourceService_WatchGroup_FullMethodName             = "/octelium.api.rsc.core.v1.ResourceService/WatchGroup"
	ResourceService_CreateNamespace_FullMethodName        = "/octelium.api.rsc.core.v1.ResourceService/CreateNamespace"
	ResourceService_UpdateNamespace_FullMethodName        = "/octelium.api.rsc.core.v1.ResourceService/UpdateNamespace"
	ResourceService_GetNamespace_FullMethodName           = "/octelium.api.rsc.core.v1.ResourceService/GetNamespace"
	ResourceService_ListNamespace_FullMethodName          = "/octelium.api.rsc.core.v1.ResourceService/ListNamespace"
	ResourceService_DeleteNamespace_FullMethodName        = "/octelium.api.rsc.core.v1.ResourceService/DeleteNamespace"
	ResourceService_WatchNamespace_FullMethodName         = "/octelium.api.rsc.core.v1.ResourceService/WatchNamespace"
	ResourceService_CreateService_FullMethodName          = "/octelium.api.rsc.core.v1.ResourceService/CreateService"
	ResourceService_UpdateService_FullMethodName          = "/octelium.api.rsc.core.v1.ResourceService/UpdateService"
	ResourceService_GetService_FullMethodName             = "/octelium.api.rsc.core.v1.ResourceService/GetService"
	ResourceService_ListService_FullMethodName            = "/octelium.api.rsc.core.v1.ResourceService/ListService"
	ResourceService_DeleteService_FullMethodName          = "/octelium.api.rsc.core.v1.ResourceService/DeleteService"
	ResourceService_WatchService_FullMethodName           = "/octelium.api.rsc.core.v1.ResourceService/WatchService"
	ResourceService_CreateSession_FullMethodName          = "/octelium.api.rsc.core.v1.ResourceService/CreateSession"
	ResourceService_UpdateSession_FullMethodName          = "/octelium.api.rsc.core.v1.ResourceService/UpdateSession"
	ResourceService_GetSession_FullMethodName             = "/octelium.api.rsc.core.v1.ResourceService/GetSession"
	ResourceService_ListSession_FullMethodName            = "/octelium.api.rsc.core.v1.ResourceService/ListSession"
	ResourceService_DeleteSession_FullMethodName          = "/octelium.api.rsc.core.v1.ResourceService/DeleteSession"
	ResourceService_WatchSession_FullMethodName           = "/octelium.api.rsc.core.v1.ResourceService/WatchSession"
	ResourceService_CreateDevice_FullMethodName           = "/octelium.api.rsc.core.v1.ResourceService/CreateDevice"
	ResourceService_UpdateDevice_FullMethodName           = "/octelium.api.rsc.core.v1.ResourceService/UpdateDevice"
	ResourceService_GetDevice_FullMethodName              = "/octelium.api.rsc.core.v1.ResourceService/GetDevice"
	ResourceService_ListDevice_FullMethodName             = "/octelium.api.rsc.core.v1.ResourceService/ListDevice"
	ResourceService_DeleteDevice_FullMethodName           = "/octelium.api.rsc.core.v1.ResourceService/DeleteDevice"
	ResourceService_WatchDevice_FullMethodName            = "/octelium.api.rsc.core.v1.ResourceService/WatchDevice"
	ResourceService_CreateSecret_FullMethodName           = "/octelium.api.rsc.core.v1.ResourceService/CreateSecret"
	ResourceService_UpdateSecret_FullMethodName           = "/octelium.api.rsc.core.v1.ResourceService/UpdateSecret"
	ResourceService_GetSecret_FullMethodName              = "/octelium.api.rsc.core.v1.ResourceService/GetSecret"
	ResourceService_ListSecret_FullMethodName             = "/octelium.api.rsc.core.v1.ResourceService/ListSecret"
	ResourceService_DeleteSecret_FullMethodName           = "/octelium.api.rsc.core.v1.ResourceService/DeleteSecret"
	ResourceService_WatchSecret_FullMethodName            = "/octelium.api.rsc.core.v1.ResourceService/WatchSecret"
	ResourceService_CreateCredential_FullMethodName       = "/octelium.api.rsc.core.v1.ResourceService/CreateCredential"
	ResourceService_UpdateCredential_FullMethodName       = "/octelium.api.rsc.core.v1.ResourceService/UpdateCredential"
	ResourceService_GetCredential_FullMethodName          = "/octelium.api.rsc.core.v1.ResourceService/GetCredential"
	ResourceService_ListCredential_FullMethodName         = "/octelium.api.rsc.core.v1.ResourceService/ListCredential"
	ResourceService_DeleteCredential_FullMethodName       = "/octelium.api.rsc.core.v1.ResourceService/DeleteCredential"
	ResourceService_WatchCredential_FullMethodName        = "/octelium.api.rsc.core.v1.ResourceService/WatchCredential"
	ResourceService_CreateConfig_FullMethodName           = "/octelium.api.rsc.core.v1.ResourceService/CreateConfig"
	ResourceService_UpdateConfig_FullMethodName           = "/octelium.api.rsc.core.v1.ResourceService/UpdateConfig"
	ResourceService_GetConfig_FullMethodName              = "/octelium.api.rsc.core.v1.ResourceService/GetConfig"
	ResourceService_ListConfig_FullMethodName             = "/octelium.api.rsc.core.v1.ResourceService/ListConfig"
	ResourceService_DeleteConfig_FullMethodName           = "/octelium.api.rsc.core.v1.ResourceService/DeleteConfig"
	ResourceService_WatchConfig_FullMethodName            = "/octelium.api.rsc.core.v1.ResourceService/WatchConfig"
	ResourceService_CreateIdentityProvider_FullMethodName = "/octelium.api.rsc.core.v1.ResourceService/CreateIdentityProvider"
	ResourceService_GetIdentityProvider_FullMethodName    = "/octelium.api.rsc.core.v1.ResourceService/GetIdentityProvider"
	ResourceService_ListIdentityProvider_FullMethodName   = "/octelium.api.rsc.core.v1.ResourceService/ListIdentityProvider"
	ResourceService_UpdateIdentityProvider_FullMethodName = "/octelium.api.rsc.core.v1.ResourceService/UpdateIdentityProvider"
	ResourceService_DeleteIdentityProvider_FullMethodName = "/octelium.api.rsc.core.v1.ResourceService/DeleteIdentityProvider"
	ResourceService_WatchIdentityProvider_FullMethodName  = "/octelium.api.rsc.core.v1.ResourceService/WatchIdentityProvider"
	ResourceService_CreateRegion_FullMethodName           = "/octelium.api.rsc.core.v1.ResourceService/CreateRegion"
	ResourceService_UpdateRegion_FullMethodName           = "/octelium.api.rsc.core.v1.ResourceService/UpdateRegion"
	ResourceService_GetRegion_FullMethodName              = "/octelium.api.rsc.core.v1.ResourceService/GetRegion"
	ResourceService_ListRegion_FullMethodName             = "/octelium.api.rsc.core.v1.ResourceService/ListRegion"
	ResourceService_DeleteRegion_FullMethodName           = "/octelium.api.rsc.core.v1.ResourceService/DeleteRegion"
	ResourceService_WatchRegion_FullMethodName            = "/octelium.api.rsc.core.v1.ResourceService/WatchRegion"
	ResourceService_CreateGateway_FullMethodName          = "/octelium.api.rsc.core.v1.ResourceService/CreateGateway"
	ResourceService_UpdateGateway_FullMethodName          = "/octelium.api.rsc.core.v1.ResourceService/UpdateGateway"
	ResourceService_GetGateway_FullMethodName             = "/octelium.api.rsc.core.v1.ResourceService/GetGateway"
	ResourceService_ListGateway_FullMethodName            = "/octelium.api.rsc.core.v1.ResourceService/ListGateway"
	ResourceService_DeleteGateway_FullMethodName          = "/octelium.api.rsc.core.v1.ResourceService/DeleteGateway"
	ResourceService_WatchGateway_FullMethodName           = "/octelium.api.rsc.core.v1.ResourceService/WatchGateway"
	ResourceService_CreatePolicyTrigger_FullMethodName    = "/octelium.api.rsc.core.v1.ResourceService/CreatePolicyTrigger"
	ResourceService_UpdatePolicyTrigger_FullMethodName    = "/octelium.api.rsc.core.v1.ResourceService/UpdatePolicyTrigger"
	ResourceService_GetPolicyTrigger_FullMethodName       = "/octelium.api.rsc.core.v1.ResourceService/GetPolicyTrigger"
	ResourceService_ListPolicyTrigger_FullMethodName      = "/octelium.api.rsc.core.v1.ResourceService/ListPolicyTrigger"
	ResourceService_DeletePolicyTrigger_FullMethodName    = "/octelium.api.rsc.core.v1.ResourceService/DeletePolicyTrigger"
	ResourceService_WatchPolicyTrigger_FullMethodName     = "/octelium.api.rsc.core.v1.ResourceService/WatchPolicyTrigger"
)

// ResourceServiceClient is the client API for ResourceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ResourceServiceClient interface {
	// GetConfig gets the Cluster Configuration.
	GetClusterConfig(ctx context.Context, in *rmetav1.GetOptions, opts ...grpc.CallOption) (*corev1.ClusterConfig, error)
	// UpdateConfig updates the Cluster Configuration.
	UpdateClusterConfig(ctx context.Context, in *corev1.ClusterConfig, opts ...grpc.CallOption) (*corev1.ClusterConfig, error)
	WatchClusterConfig(ctx context.Context, in *rmetav1.WatchOptions, opts ...grpc.CallOption) (grpc.ServerStreamingClient[rmetav1.WatchEvent], error)
	CreatePolicy(ctx context.Context, in *corev1.Policy, opts ...grpc.CallOption) (*corev1.Policy, error)
	UpdatePolicy(ctx context.Context, in *corev1.Policy, opts ...grpc.CallOption) (*corev1.Policy, error)
	GetPolicy(ctx context.Context, in *rmetav1.GetOptions, opts ...grpc.CallOption) (*corev1.Policy, error)
	ListPolicy(ctx context.Context, in *rmetav1.ListOptions, opts ...grpc.CallOption) (*corev1.PolicyList, error)
	DeletePolicy(ctx context.Context, in *rmetav1.DeleteOptions, opts ...grpc.CallOption) (*rmetav1.OperationResult, error)
	WatchPolicy(ctx context.Context, in *rmetav1.WatchOptions, opts ...grpc.CallOption) (grpc.ServerStreamingClient[rmetav1.WatchEvent], error)
	CreateUser(ctx context.Context, in *corev1.User, opts ...grpc.CallOption) (*corev1.User, error)
	UpdateUser(ctx context.Context, in *corev1.User, opts ...grpc.CallOption) (*corev1.User, error)
	GetUser(ctx context.Context, in *rmetav1.GetOptions, opts ...grpc.CallOption) (*corev1.User, error)
	ListUser(ctx context.Context, in *rmetav1.ListOptions, opts ...grpc.CallOption) (*corev1.UserList, error)
	DeleteUser(ctx context.Context, in *rmetav1.DeleteOptions, opts ...grpc.CallOption) (*rmetav1.OperationResult, error)
	WatchUser(ctx context.Context, in *rmetav1.WatchOptions, opts ...grpc.CallOption) (grpc.ServerStreamingClient[rmetav1.WatchEvent], error)
	CreateGroup(ctx context.Context, in *corev1.Group, opts ...grpc.CallOption) (*corev1.Group, error)
	UpdateGroup(ctx context.Context, in *corev1.Group, opts ...grpc.CallOption) (*corev1.Group, error)
	GetGroup(ctx context.Context, in *rmetav1.GetOptions, opts ...grpc.CallOption) (*corev1.Group, error)
	ListGroup(ctx context.Context, in *rmetav1.ListOptions, opts ...grpc.CallOption) (*corev1.GroupList, error)
	DeleteGroup(ctx context.Context, in *rmetav1.DeleteOptions, opts ...grpc.CallOption) (*rmetav1.OperationResult, error)
	WatchGroup(ctx context.Context, in *rmetav1.WatchOptions, opts ...grpc.CallOption) (grpc.ServerStreamingClient[rmetav1.WatchEvent], error)
	CreateNamespace(ctx context.Context, in *corev1.Namespace, opts ...grpc.CallOption) (*corev1.Namespace, error)
	UpdateNamespace(ctx context.Context, in *corev1.Namespace, opts ...grpc.CallOption) (*corev1.Namespace, error)
	GetNamespace(ctx context.Context, in *rmetav1.GetOptions, opts ...grpc.CallOption) (*corev1.Namespace, error)
	ListNamespace(ctx context.Context, in *rmetav1.ListOptions, opts ...grpc.CallOption) (*corev1.NamespaceList, error)
	DeleteNamespace(ctx context.Context, in *rmetav1.DeleteOptions, opts ...grpc.CallOption) (*rmetav1.OperationResult, error)
	WatchNamespace(ctx context.Context, in *rmetav1.WatchOptions, opts ...grpc.CallOption) (grpc.ServerStreamingClient[rmetav1.WatchEvent], error)
	CreateService(ctx context.Context, in *corev1.Service, opts ...grpc.CallOption) (*corev1.Service, error)
	UpdateService(ctx context.Context, in *corev1.Service, opts ...grpc.CallOption) (*corev1.Service, error)
	GetService(ctx context.Context, in *rmetav1.GetOptions, opts ...grpc.CallOption) (*corev1.Service, error)
	ListService(ctx context.Context, in *rmetav1.ListOptions, opts ...grpc.CallOption) (*corev1.ServiceList, error)
	DeleteService(ctx context.Context, in *rmetav1.DeleteOptions, opts ...grpc.CallOption) (*rmetav1.OperationResult, error)
	WatchService(ctx context.Context, in *rmetav1.WatchOptions, opts ...grpc.CallOption) (grpc.ServerStreamingClient[rmetav1.WatchEvent], error)
	CreateSession(ctx context.Context, in *corev1.Session, opts ...grpc.CallOption) (*corev1.Session, error)
	UpdateSession(ctx context.Context, in *corev1.Session, opts ...grpc.CallOption) (*corev1.Session, error)
	GetSession(ctx context.Context, in *rmetav1.GetOptions, opts ...grpc.CallOption) (*corev1.Session, error)
	ListSession(ctx context.Context, in *rmetav1.ListOptions, opts ...grpc.CallOption) (*corev1.SessionList, error)
	DeleteSession(ctx context.Context, in *rmetav1.DeleteOptions, opts ...grpc.CallOption) (*rmetav1.OperationResult, error)
	WatchSession(ctx context.Context, in *rmetav1.WatchOptions, opts ...grpc.CallOption) (grpc.ServerStreamingClient[rmetav1.WatchEvent], error)
	CreateDevice(ctx context.Context, in *corev1.Device, opts ...grpc.CallOption) (*corev1.Device, error)
	UpdateDevice(ctx context.Context, in *corev1.Device, opts ...grpc.CallOption) (*corev1.Device, error)
	GetDevice(ctx context.Context, in *rmetav1.GetOptions, opts ...grpc.CallOption) (*corev1.Device, error)
	ListDevice(ctx context.Context, in *rmetav1.ListOptions, opts ...grpc.CallOption) (*corev1.DeviceList, error)
	DeleteDevice(ctx context.Context, in *rmetav1.DeleteOptions, opts ...grpc.CallOption) (*rmetav1.OperationResult, error)
	WatchDevice(ctx context.Context, in *rmetav1.WatchOptions, opts ...grpc.CallOption) (grpc.ServerStreamingClient[rmetav1.WatchEvent], error)
	CreateSecret(ctx context.Context, in *corev1.Secret, opts ...grpc.CallOption) (*corev1.Secret, error)
	UpdateSecret(ctx context.Context, in *corev1.Secret, opts ...grpc.CallOption) (*corev1.Secret, error)
	GetSecret(ctx context.Context, in *rmetav1.GetOptions, opts ...grpc.CallOption) (*corev1.Secret, error)
	ListSecret(ctx context.Context, in *rmetav1.ListOptions, opts ...grpc.CallOption) (*corev1.SecretList, error)
	DeleteSecret(ctx context.Context, in *rmetav1.DeleteOptions, opts ...grpc.CallOption) (*rmetav1.OperationResult, error)
	WatchSecret(ctx context.Context, in *rmetav1.WatchOptions, opts ...grpc.CallOption) (grpc.ServerStreamingClient[rmetav1.WatchEvent], error)
	CreateCredential(ctx context.Context, in *corev1.Credential, opts ...grpc.CallOption) (*corev1.Credential, error)
	UpdateCredential(ctx context.Context, in *corev1.Credential, opts ...grpc.CallOption) (*corev1.Credential, error)
	GetCredential(ctx context.Context, in *rmetav1.GetOptions, opts ...grpc.CallOption) (*corev1.Credential, error)
	ListCredential(ctx context.Context, in *rmetav1.ListOptions, opts ...grpc.CallOption) (*corev1.CredentialList, error)
	DeleteCredential(ctx context.Context, in *rmetav1.DeleteOptions, opts ...grpc.CallOption) (*rmetav1.OperationResult, error)
	WatchCredential(ctx context.Context, in *rmetav1.WatchOptions, opts ...grpc.CallOption) (grpc.ServerStreamingClient[rmetav1.WatchEvent], error)
	CreateConfig(ctx context.Context, in *corev1.Config, opts ...grpc.CallOption) (*corev1.Config, error)
	UpdateConfig(ctx context.Context, in *corev1.Config, opts ...grpc.CallOption) (*corev1.Config, error)
	GetConfig(ctx context.Context, in *rmetav1.GetOptions, opts ...grpc.CallOption) (*corev1.Config, error)
	ListConfig(ctx context.Context, in *rmetav1.ListOptions, opts ...grpc.CallOption) (*corev1.ConfigList, error)
	DeleteConfig(ctx context.Context, in *rmetav1.DeleteOptions, opts ...grpc.CallOption) (*rmetav1.OperationResult, error)
	WatchConfig(ctx context.Context, in *rmetav1.WatchOptions, opts ...grpc.CallOption) (grpc.ServerStreamingClient[rmetav1.WatchEvent], error)
	CreateIdentityProvider(ctx context.Context, in *corev1.IdentityProvider, opts ...grpc.CallOption) (*corev1.IdentityProvider, error)
	GetIdentityProvider(ctx context.Context, in *rmetav1.GetOptions, opts ...grpc.CallOption) (*corev1.IdentityProvider, error)
	ListIdentityProvider(ctx context.Context, in *rmetav1.ListOptions, opts ...grpc.CallOption) (*corev1.IdentityProviderList, error)
	UpdateIdentityProvider(ctx context.Context, in *corev1.IdentityProvider, opts ...grpc.CallOption) (*corev1.IdentityProvider, error)
	DeleteIdentityProvider(ctx context.Context, in *rmetav1.DeleteOptions, opts ...grpc.CallOption) (*rmetav1.OperationResult, error)
	WatchIdentityProvider(ctx context.Context, in *rmetav1.WatchOptions, opts ...grpc.CallOption) (grpc.ServerStreamingClient[rmetav1.WatchEvent], error)
	CreateRegion(ctx context.Context, in *corev1.Region, opts ...grpc.CallOption) (*corev1.Region, error)
	UpdateRegion(ctx context.Context, in *corev1.Region, opts ...grpc.CallOption) (*corev1.Region, error)
	GetRegion(ctx context.Context, in *rmetav1.GetOptions, opts ...grpc.CallOption) (*corev1.Region, error)
	ListRegion(ctx context.Context, in *rmetav1.ListOptions, opts ...grpc.CallOption) (*corev1.RegionList, error)
	DeleteRegion(ctx context.Context, in *rmetav1.DeleteOptions, opts ...grpc.CallOption) (*rmetav1.OperationResult, error)
	WatchRegion(ctx context.Context, in *rmetav1.WatchOptions, opts ...grpc.CallOption) (grpc.ServerStreamingClient[rmetav1.WatchEvent], error)
	CreateGateway(ctx context.Context, in *corev1.Gateway, opts ...grpc.CallOption) (*corev1.Gateway, error)
	UpdateGateway(ctx context.Context, in *corev1.Gateway, opts ...grpc.CallOption) (*corev1.Gateway, error)
	GetGateway(ctx context.Context, in *rmetav1.GetOptions, opts ...grpc.CallOption) (*corev1.Gateway, error)
	ListGateway(ctx context.Context, in *rmetav1.ListOptions, opts ...grpc.CallOption) (*corev1.GatewayList, error)
	DeleteGateway(ctx context.Context, in *rmetav1.DeleteOptions, opts ...grpc.CallOption) (*rmetav1.OperationResult, error)
	WatchGateway(ctx context.Context, in *rmetav1.WatchOptions, opts ...grpc.CallOption) (grpc.ServerStreamingClient[rmetav1.WatchEvent], error)
	CreatePolicyTrigger(ctx context.Context, in *corev1.PolicyTrigger, opts ...grpc.CallOption) (*corev1.PolicyTrigger, error)
	UpdatePolicyTrigger(ctx context.Context, in *corev1.PolicyTrigger, opts ...grpc.CallOption) (*corev1.PolicyTrigger, error)
	GetPolicyTrigger(ctx context.Context, in *rmetav1.GetOptions, opts ...grpc.CallOption) (*corev1.PolicyTrigger, error)
	ListPolicyTrigger(ctx context.Context, in *rmetav1.ListOptions, opts ...grpc.CallOption) (*corev1.PolicyTriggerList, error)
	DeletePolicyTrigger(ctx context.Context, in *rmetav1.DeleteOptions, opts ...grpc.CallOption) (*rmetav1.OperationResult, error)
	WatchPolicyTrigger(ctx context.Context, in *rmetav1.WatchOptions, opts ...grpc.CallOption) (grpc.ServerStreamingClient[rmetav1.WatchEvent], error)
}

type resourceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewResourceServiceClient(cc grpc.ClientConnInterface) ResourceServiceClient {
	return &resourceServiceClient{cc}
}

func (c *resourceServiceClient) GetClusterConfig(ctx context.Context, in *rmetav1.GetOptions, opts ...grpc.CallOption) (*corev1.ClusterConfig, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(corev1.ClusterConfig)
	err := c.cc.Invoke(ctx, ResourceService_GetClusterConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) UpdateClusterConfig(ctx context.Context, in *corev1.ClusterConfig, opts ...grpc.CallOption) (*corev1.ClusterConfig, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(corev1.ClusterConfig)
	err := c.cc.Invoke(ctx, ResourceService_UpdateClusterConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) WatchClusterConfig(ctx context.Context, in *rmetav1.WatchOptions, opts ...grpc.CallOption) (grpc.ServerStreamingClient[rmetav1.WatchEvent], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ResourceService_ServiceDesc.Streams[0], ResourceService_WatchClusterConfig_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[rmetav1.WatchOptions, rmetav1.WatchEvent]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ResourceService_WatchClusterConfigClient = grpc.ServerStreamingClient[rmetav1.WatchEvent]

func (c *resourceServiceClient) CreatePolicy(ctx context.Context, in *corev1.Policy, opts ...grpc.CallOption) (*corev1.Policy, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(corev1.Policy)
	err := c.cc.Invoke(ctx, ResourceService_CreatePolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) UpdatePolicy(ctx context.Context, in *corev1.Policy, opts ...grpc.CallOption) (*corev1.Policy, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(corev1.Policy)
	err := c.cc.Invoke(ctx, ResourceService_UpdatePolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) GetPolicy(ctx context.Context, in *rmetav1.GetOptions, opts ...grpc.CallOption) (*corev1.Policy, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(corev1.Policy)
	err := c.cc.Invoke(ctx, ResourceService_GetPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) ListPolicy(ctx context.Context, in *rmetav1.ListOptions, opts ...grpc.CallOption) (*corev1.PolicyList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(corev1.PolicyList)
	err := c.cc.Invoke(ctx, ResourceService_ListPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) DeletePolicy(ctx context.Context, in *rmetav1.DeleteOptions, opts ...grpc.CallOption) (*rmetav1.OperationResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(rmetav1.OperationResult)
	err := c.cc.Invoke(ctx, ResourceService_DeletePolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) WatchPolicy(ctx context.Context, in *rmetav1.WatchOptions, opts ...grpc.CallOption) (grpc.ServerStreamingClient[rmetav1.WatchEvent], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ResourceService_ServiceDesc.Streams[1], ResourceService_WatchPolicy_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[rmetav1.WatchOptions, rmetav1.WatchEvent]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ResourceService_WatchPolicyClient = grpc.ServerStreamingClient[rmetav1.WatchEvent]

func (c *resourceServiceClient) CreateUser(ctx context.Context, in *corev1.User, opts ...grpc.CallOption) (*corev1.User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(corev1.User)
	err := c.cc.Invoke(ctx, ResourceService_CreateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) UpdateUser(ctx context.Context, in *corev1.User, opts ...grpc.CallOption) (*corev1.User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(corev1.User)
	err := c.cc.Invoke(ctx, ResourceService_UpdateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) GetUser(ctx context.Context, in *rmetav1.GetOptions, opts ...grpc.CallOption) (*corev1.User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(corev1.User)
	err := c.cc.Invoke(ctx, ResourceService_GetUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) ListUser(ctx context.Context, in *rmetav1.ListOptions, opts ...grpc.CallOption) (*corev1.UserList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(corev1.UserList)
	err := c.cc.Invoke(ctx, ResourceService_ListUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) DeleteUser(ctx context.Context, in *rmetav1.DeleteOptions, opts ...grpc.CallOption) (*rmetav1.OperationResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(rmetav1.OperationResult)
	err := c.cc.Invoke(ctx, ResourceService_DeleteUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) WatchUser(ctx context.Context, in *rmetav1.WatchOptions, opts ...grpc.CallOption) (grpc.ServerStreamingClient[rmetav1.WatchEvent], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ResourceService_ServiceDesc.Streams[2], ResourceService_WatchUser_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[rmetav1.WatchOptions, rmetav1.WatchEvent]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ResourceService_WatchUserClient = grpc.ServerStreamingClient[rmetav1.WatchEvent]

func (c *resourceServiceClient) CreateGroup(ctx context.Context, in *corev1.Group, opts ...grpc.CallOption) (*corev1.Group, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(corev1.Group)
	err := c.cc.Invoke(ctx, ResourceService_CreateGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) UpdateGroup(ctx context.Context, in *corev1.Group, opts ...grpc.CallOption) (*corev1.Group, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(corev1.Group)
	err := c.cc.Invoke(ctx, ResourceService_UpdateGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) GetGroup(ctx context.Context, in *rmetav1.GetOptions, opts ...grpc.CallOption) (*corev1.Group, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(corev1.Group)
	err := c.cc.Invoke(ctx, ResourceService_GetGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) ListGroup(ctx context.Context, in *rmetav1.ListOptions, opts ...grpc.CallOption) (*corev1.GroupList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(corev1.GroupList)
	err := c.cc.Invoke(ctx, ResourceService_ListGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) DeleteGroup(ctx context.Context, in *rmetav1.DeleteOptions, opts ...grpc.CallOption) (*rmetav1.OperationResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(rmetav1.OperationResult)
	err := c.cc.Invoke(ctx, ResourceService_DeleteGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) WatchGroup(ctx context.Context, in *rmetav1.WatchOptions, opts ...grpc.CallOption) (grpc.ServerStreamingClient[rmetav1.WatchEvent], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ResourceService_ServiceDesc.Streams[3], ResourceService_WatchGroup_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[rmetav1.WatchOptions, rmetav1.WatchEvent]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ResourceService_WatchGroupClient = grpc.ServerStreamingClient[rmetav1.WatchEvent]

func (c *resourceServiceClient) CreateNamespace(ctx context.Context, in *corev1.Namespace, opts ...grpc.CallOption) (*corev1.Namespace, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(corev1.Namespace)
	err := c.cc.Invoke(ctx, ResourceService_CreateNamespace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) UpdateNamespace(ctx context.Context, in *corev1.Namespace, opts ...grpc.CallOption) (*corev1.Namespace, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(corev1.Namespace)
	err := c.cc.Invoke(ctx, ResourceService_UpdateNamespace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) GetNamespace(ctx context.Context, in *rmetav1.GetOptions, opts ...grpc.CallOption) (*corev1.Namespace, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(corev1.Namespace)
	err := c.cc.Invoke(ctx, ResourceService_GetNamespace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) ListNamespace(ctx context.Context, in *rmetav1.ListOptions, opts ...grpc.CallOption) (*corev1.NamespaceList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(corev1.NamespaceList)
	err := c.cc.Invoke(ctx, ResourceService_ListNamespace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) DeleteNamespace(ctx context.Context, in *rmetav1.DeleteOptions, opts ...grpc.CallOption) (*rmetav1.OperationResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(rmetav1.OperationResult)
	err := c.cc.Invoke(ctx, ResourceService_DeleteNamespace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) WatchNamespace(ctx context.Context, in *rmetav1.WatchOptions, opts ...grpc.CallOption) (grpc.ServerStreamingClient[rmetav1.WatchEvent], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ResourceService_ServiceDesc.Streams[4], ResourceService_WatchNamespace_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[rmetav1.WatchOptions, rmetav1.WatchEvent]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ResourceService_WatchNamespaceClient = grpc.ServerStreamingClient[rmetav1.WatchEvent]

func (c *resourceServiceClient) CreateService(ctx context.Context, in *corev1.Service, opts ...grpc.CallOption) (*corev1.Service, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(corev1.Service)
	err := c.cc.Invoke(ctx, ResourceService_CreateService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) UpdateService(ctx context.Context, in *corev1.Service, opts ...grpc.CallOption) (*corev1.Service, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(corev1.Service)
	err := c.cc.Invoke(ctx, ResourceService_UpdateService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) GetService(ctx context.Context, in *rmetav1.GetOptions, opts ...grpc.CallOption) (*corev1.Service, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(corev1.Service)
	err := c.cc.Invoke(ctx, ResourceService_GetService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) ListService(ctx context.Context, in *rmetav1.ListOptions, opts ...grpc.CallOption) (*corev1.ServiceList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(corev1.ServiceList)
	err := c.cc.Invoke(ctx, ResourceService_ListService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) DeleteService(ctx context.Context, in *rmetav1.DeleteOptions, opts ...grpc.CallOption) (*rmetav1.OperationResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(rmetav1.OperationResult)
	err := c.cc.Invoke(ctx, ResourceService_DeleteService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) WatchService(ctx context.Context, in *rmetav1.WatchOptions, opts ...grpc.CallOption) (grpc.ServerStreamingClient[rmetav1.WatchEvent], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ResourceService_ServiceDesc.Streams[5], ResourceService_WatchService_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[rmetav1.WatchOptions, rmetav1.WatchEvent]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ResourceService_WatchServiceClient = grpc.ServerStreamingClient[rmetav1.WatchEvent]

func (c *resourceServiceClient) CreateSession(ctx context.Context, in *corev1.Session, opts ...grpc.CallOption) (*corev1.Session, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(corev1.Session)
	err := c.cc.Invoke(ctx, ResourceService_CreateSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) UpdateSession(ctx context.Context, in *corev1.Session, opts ...grpc.CallOption) (*corev1.Session, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(corev1.Session)
	err := c.cc.Invoke(ctx, ResourceService_UpdateSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) GetSession(ctx context.Context, in *rmetav1.GetOptions, opts ...grpc.CallOption) (*corev1.Session, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(corev1.Session)
	err := c.cc.Invoke(ctx, ResourceService_GetSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) ListSession(ctx context.Context, in *rmetav1.ListOptions, opts ...grpc.CallOption) (*corev1.SessionList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(corev1.SessionList)
	err := c.cc.Invoke(ctx, ResourceService_ListSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) DeleteSession(ctx context.Context, in *rmetav1.DeleteOptions, opts ...grpc.CallOption) (*rmetav1.OperationResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(rmetav1.OperationResult)
	err := c.cc.Invoke(ctx, ResourceService_DeleteSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) WatchSession(ctx context.Context, in *rmetav1.WatchOptions, opts ...grpc.CallOption) (grpc.ServerStreamingClient[rmetav1.WatchEvent], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ResourceService_ServiceDesc.Streams[6], ResourceService_WatchSession_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[rmetav1.WatchOptions, rmetav1.WatchEvent]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ResourceService_WatchSessionClient = grpc.ServerStreamingClient[rmetav1.WatchEvent]

func (c *resourceServiceClient) CreateDevice(ctx context.Context, in *corev1.Device, opts ...grpc.CallOption) (*corev1.Device, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(corev1.Device)
	err := c.cc.Invoke(ctx, ResourceService_CreateDevice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) UpdateDevice(ctx context.Context, in *corev1.Device, opts ...grpc.CallOption) (*corev1.Device, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(corev1.Device)
	err := c.cc.Invoke(ctx, ResourceService_UpdateDevice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) GetDevice(ctx context.Context, in *rmetav1.GetOptions, opts ...grpc.CallOption) (*corev1.Device, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(corev1.Device)
	err := c.cc.Invoke(ctx, ResourceService_GetDevice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) ListDevice(ctx context.Context, in *rmetav1.ListOptions, opts ...grpc.CallOption) (*corev1.DeviceList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(corev1.DeviceList)
	err := c.cc.Invoke(ctx, ResourceService_ListDevice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) DeleteDevice(ctx context.Context, in *rmetav1.DeleteOptions, opts ...grpc.CallOption) (*rmetav1.OperationResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(rmetav1.OperationResult)
	err := c.cc.Invoke(ctx, ResourceService_DeleteDevice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) WatchDevice(ctx context.Context, in *rmetav1.WatchOptions, opts ...grpc.CallOption) (grpc.ServerStreamingClient[rmetav1.WatchEvent], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ResourceService_ServiceDesc.Streams[7], ResourceService_WatchDevice_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[rmetav1.WatchOptions, rmetav1.WatchEvent]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ResourceService_WatchDeviceClient = grpc.ServerStreamingClient[rmetav1.WatchEvent]

func (c *resourceServiceClient) CreateSecret(ctx context.Context, in *corev1.Secret, opts ...grpc.CallOption) (*corev1.Secret, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(corev1.Secret)
	err := c.cc.Invoke(ctx, ResourceService_CreateSecret_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) UpdateSecret(ctx context.Context, in *corev1.Secret, opts ...grpc.CallOption) (*corev1.Secret, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(corev1.Secret)
	err := c.cc.Invoke(ctx, ResourceService_UpdateSecret_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) GetSecret(ctx context.Context, in *rmetav1.GetOptions, opts ...grpc.CallOption) (*corev1.Secret, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(corev1.Secret)
	err := c.cc.Invoke(ctx, ResourceService_GetSecret_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) ListSecret(ctx context.Context, in *rmetav1.ListOptions, opts ...grpc.CallOption) (*corev1.SecretList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(corev1.SecretList)
	err := c.cc.Invoke(ctx, ResourceService_ListSecret_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) DeleteSecret(ctx context.Context, in *rmetav1.DeleteOptions, opts ...grpc.CallOption) (*rmetav1.OperationResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(rmetav1.OperationResult)
	err := c.cc.Invoke(ctx, ResourceService_DeleteSecret_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) WatchSecret(ctx context.Context, in *rmetav1.WatchOptions, opts ...grpc.CallOption) (grpc.ServerStreamingClient[rmetav1.WatchEvent], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ResourceService_ServiceDesc.Streams[8], ResourceService_WatchSecret_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[rmetav1.WatchOptions, rmetav1.WatchEvent]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ResourceService_WatchSecretClient = grpc.ServerStreamingClient[rmetav1.WatchEvent]

func (c *resourceServiceClient) CreateCredential(ctx context.Context, in *corev1.Credential, opts ...grpc.CallOption) (*corev1.Credential, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(corev1.Credential)
	err := c.cc.Invoke(ctx, ResourceService_CreateCredential_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) UpdateCredential(ctx context.Context, in *corev1.Credential, opts ...grpc.CallOption) (*corev1.Credential, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(corev1.Credential)
	err := c.cc.Invoke(ctx, ResourceService_UpdateCredential_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) GetCredential(ctx context.Context, in *rmetav1.GetOptions, opts ...grpc.CallOption) (*corev1.Credential, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(corev1.Credential)
	err := c.cc.Invoke(ctx, ResourceService_GetCredential_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) ListCredential(ctx context.Context, in *rmetav1.ListOptions, opts ...grpc.CallOption) (*corev1.CredentialList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(corev1.CredentialList)
	err := c.cc.Invoke(ctx, ResourceService_ListCredential_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) DeleteCredential(ctx context.Context, in *rmetav1.DeleteOptions, opts ...grpc.CallOption) (*rmetav1.OperationResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(rmetav1.OperationResult)
	err := c.cc.Invoke(ctx, ResourceService_DeleteCredential_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) WatchCredential(ctx context.Context, in *rmetav1.WatchOptions, opts ...grpc.CallOption) (grpc.ServerStreamingClient[rmetav1.WatchEvent], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ResourceService_ServiceDesc.Streams[9], ResourceService_WatchCredential_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[rmetav1.WatchOptions, rmetav1.WatchEvent]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ResourceService_WatchCredentialClient = grpc.ServerStreamingClient[rmetav1.WatchEvent]

func (c *resourceServiceClient) CreateConfig(ctx context.Context, in *corev1.Config, opts ...grpc.CallOption) (*corev1.Config, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(corev1.Config)
	err := c.cc.Invoke(ctx, ResourceService_CreateConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) UpdateConfig(ctx context.Context, in *corev1.Config, opts ...grpc.CallOption) (*corev1.Config, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(corev1.Config)
	err := c.cc.Invoke(ctx, ResourceService_UpdateConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) GetConfig(ctx context.Context, in *rmetav1.GetOptions, opts ...grpc.CallOption) (*corev1.Config, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(corev1.Config)
	err := c.cc.Invoke(ctx, ResourceService_GetConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) ListConfig(ctx context.Context, in *rmetav1.ListOptions, opts ...grpc.CallOption) (*corev1.ConfigList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(corev1.ConfigList)
	err := c.cc.Invoke(ctx, ResourceService_ListConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) DeleteConfig(ctx context.Context, in *rmetav1.DeleteOptions, opts ...grpc.CallOption) (*rmetav1.OperationResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(rmetav1.OperationResult)
	err := c.cc.Invoke(ctx, ResourceService_DeleteConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) WatchConfig(ctx context.Context, in *rmetav1.WatchOptions, opts ...grpc.CallOption) (grpc.ServerStreamingClient[rmetav1.WatchEvent], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ResourceService_ServiceDesc.Streams[10], ResourceService_WatchConfig_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[rmetav1.WatchOptions, rmetav1.WatchEvent]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ResourceService_WatchConfigClient = grpc.ServerStreamingClient[rmetav1.WatchEvent]

func (c *resourceServiceClient) CreateIdentityProvider(ctx context.Context, in *corev1.IdentityProvider, opts ...grpc.CallOption) (*corev1.IdentityProvider, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(corev1.IdentityProvider)
	err := c.cc.Invoke(ctx, ResourceService_CreateIdentityProvider_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) GetIdentityProvider(ctx context.Context, in *rmetav1.GetOptions, opts ...grpc.CallOption) (*corev1.IdentityProvider, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(corev1.IdentityProvider)
	err := c.cc.Invoke(ctx, ResourceService_GetIdentityProvider_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) ListIdentityProvider(ctx context.Context, in *rmetav1.ListOptions, opts ...grpc.CallOption) (*corev1.IdentityProviderList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(corev1.IdentityProviderList)
	err := c.cc.Invoke(ctx, ResourceService_ListIdentityProvider_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) UpdateIdentityProvider(ctx context.Context, in *corev1.IdentityProvider, opts ...grpc.CallOption) (*corev1.IdentityProvider, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(corev1.IdentityProvider)
	err := c.cc.Invoke(ctx, ResourceService_UpdateIdentityProvider_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) DeleteIdentityProvider(ctx context.Context, in *rmetav1.DeleteOptions, opts ...grpc.CallOption) (*rmetav1.OperationResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(rmetav1.OperationResult)
	err := c.cc.Invoke(ctx, ResourceService_DeleteIdentityProvider_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) WatchIdentityProvider(ctx context.Context, in *rmetav1.WatchOptions, opts ...grpc.CallOption) (grpc.ServerStreamingClient[rmetav1.WatchEvent], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ResourceService_ServiceDesc.Streams[11], ResourceService_WatchIdentityProvider_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[rmetav1.WatchOptions, rmetav1.WatchEvent]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ResourceService_WatchIdentityProviderClient = grpc.ServerStreamingClient[rmetav1.WatchEvent]

func (c *resourceServiceClient) CreateRegion(ctx context.Context, in *corev1.Region, opts ...grpc.CallOption) (*corev1.Region, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(corev1.Region)
	err := c.cc.Invoke(ctx, ResourceService_CreateRegion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) UpdateRegion(ctx context.Context, in *corev1.Region, opts ...grpc.CallOption) (*corev1.Region, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(corev1.Region)
	err := c.cc.Invoke(ctx, ResourceService_UpdateRegion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) GetRegion(ctx context.Context, in *rmetav1.GetOptions, opts ...grpc.CallOption) (*corev1.Region, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(corev1.Region)
	err := c.cc.Invoke(ctx, ResourceService_GetRegion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) ListRegion(ctx context.Context, in *rmetav1.ListOptions, opts ...grpc.CallOption) (*corev1.RegionList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(corev1.RegionList)
	err := c.cc.Invoke(ctx, ResourceService_ListRegion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) DeleteRegion(ctx context.Context, in *rmetav1.DeleteOptions, opts ...grpc.CallOption) (*rmetav1.OperationResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(rmetav1.OperationResult)
	err := c.cc.Invoke(ctx, ResourceService_DeleteRegion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) WatchRegion(ctx context.Context, in *rmetav1.WatchOptions, opts ...grpc.CallOption) (grpc.ServerStreamingClient[rmetav1.WatchEvent], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ResourceService_ServiceDesc.Streams[12], ResourceService_WatchRegion_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[rmetav1.WatchOptions, rmetav1.WatchEvent]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ResourceService_WatchRegionClient = grpc.ServerStreamingClient[rmetav1.WatchEvent]

func (c *resourceServiceClient) CreateGateway(ctx context.Context, in *corev1.Gateway, opts ...grpc.CallOption) (*corev1.Gateway, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(corev1.Gateway)
	err := c.cc.Invoke(ctx, ResourceService_CreateGateway_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) UpdateGateway(ctx context.Context, in *corev1.Gateway, opts ...grpc.CallOption) (*corev1.Gateway, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(corev1.Gateway)
	err := c.cc.Invoke(ctx, ResourceService_UpdateGateway_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) GetGateway(ctx context.Context, in *rmetav1.GetOptions, opts ...grpc.CallOption) (*corev1.Gateway, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(corev1.Gateway)
	err := c.cc.Invoke(ctx, ResourceService_GetGateway_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) ListGateway(ctx context.Context, in *rmetav1.ListOptions, opts ...grpc.CallOption) (*corev1.GatewayList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(corev1.GatewayList)
	err := c.cc.Invoke(ctx, ResourceService_ListGateway_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) DeleteGateway(ctx context.Context, in *rmetav1.DeleteOptions, opts ...grpc.CallOption) (*rmetav1.OperationResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(rmetav1.OperationResult)
	err := c.cc.Invoke(ctx, ResourceService_DeleteGateway_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) WatchGateway(ctx context.Context, in *rmetav1.WatchOptions, opts ...grpc.CallOption) (grpc.ServerStreamingClient[rmetav1.WatchEvent], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ResourceService_ServiceDesc.Streams[13], ResourceService_WatchGateway_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[rmetav1.WatchOptions, rmetav1.WatchEvent]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ResourceService_WatchGatewayClient = grpc.ServerStreamingClient[rmetav1.WatchEvent]

func (c *resourceServiceClient) CreatePolicyTrigger(ctx context.Context, in *corev1.PolicyTrigger, opts ...grpc.CallOption) (*corev1.PolicyTrigger, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(corev1.PolicyTrigger)
	err := c.cc.Invoke(ctx, ResourceService_CreatePolicyTrigger_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) UpdatePolicyTrigger(ctx context.Context, in *corev1.PolicyTrigger, opts ...grpc.CallOption) (*corev1.PolicyTrigger, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(corev1.PolicyTrigger)
	err := c.cc.Invoke(ctx, ResourceService_UpdatePolicyTrigger_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) GetPolicyTrigger(ctx context.Context, in *rmetav1.GetOptions, opts ...grpc.CallOption) (*corev1.PolicyTrigger, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(corev1.PolicyTrigger)
	err := c.cc.Invoke(ctx, ResourceService_GetPolicyTrigger_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) ListPolicyTrigger(ctx context.Context, in *rmetav1.ListOptions, opts ...grpc.CallOption) (*corev1.PolicyTriggerList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(corev1.PolicyTriggerList)
	err := c.cc.Invoke(ctx, ResourceService_ListPolicyTrigger_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) DeletePolicyTrigger(ctx context.Context, in *rmetav1.DeleteOptions, opts ...grpc.CallOption) (*rmetav1.OperationResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(rmetav1.OperationResult)
	err := c.cc.Invoke(ctx, ResourceService_DeletePolicyTrigger_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) WatchPolicyTrigger(ctx context.Context, in *rmetav1.WatchOptions, opts ...grpc.CallOption) (grpc.ServerStreamingClient[rmetav1.WatchEvent], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ResourceService_ServiceDesc.Streams[14], ResourceService_WatchPolicyTrigger_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[rmetav1.WatchOptions, rmetav1.WatchEvent]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ResourceService_WatchPolicyTriggerClient = grpc.ServerStreamingClient[rmetav1.WatchEvent]

// ResourceServiceServer is the server API for ResourceService service.
// All implementations must embed UnimplementedResourceServiceServer
// for forward compatibility.
type ResourceServiceServer interface {
	// GetConfig gets the Cluster Configuration.
	GetClusterConfig(context.Context, *rmetav1.GetOptions) (*corev1.ClusterConfig, error)
	// UpdateConfig updates the Cluster Configuration.
	UpdateClusterConfig(context.Context, *corev1.ClusterConfig) (*corev1.ClusterConfig, error)
	WatchClusterConfig(*rmetav1.WatchOptions, grpc.ServerStreamingServer[rmetav1.WatchEvent]) error
	CreatePolicy(context.Context, *corev1.Policy) (*corev1.Policy, error)
	UpdatePolicy(context.Context, *corev1.Policy) (*corev1.Policy, error)
	GetPolicy(context.Context, *rmetav1.GetOptions) (*corev1.Policy, error)
	ListPolicy(context.Context, *rmetav1.ListOptions) (*corev1.PolicyList, error)
	DeletePolicy(context.Context, *rmetav1.DeleteOptions) (*rmetav1.OperationResult, error)
	WatchPolicy(*rmetav1.WatchOptions, grpc.ServerStreamingServer[rmetav1.WatchEvent]) error
	CreateUser(context.Context, *corev1.User) (*corev1.User, error)
	UpdateUser(context.Context, *corev1.User) (*corev1.User, error)
	GetUser(context.Context, *rmetav1.GetOptions) (*corev1.User, error)
	ListUser(context.Context, *rmetav1.ListOptions) (*corev1.UserList, error)
	DeleteUser(context.Context, *rmetav1.DeleteOptions) (*rmetav1.OperationResult, error)
	WatchUser(*rmetav1.WatchOptions, grpc.ServerStreamingServer[rmetav1.WatchEvent]) error
	CreateGroup(context.Context, *corev1.Group) (*corev1.Group, error)
	UpdateGroup(context.Context, *corev1.Group) (*corev1.Group, error)
	GetGroup(context.Context, *rmetav1.GetOptions) (*corev1.Group, error)
	ListGroup(context.Context, *rmetav1.ListOptions) (*corev1.GroupList, error)
	DeleteGroup(context.Context, *rmetav1.DeleteOptions) (*rmetav1.OperationResult, error)
	WatchGroup(*rmetav1.WatchOptions, grpc.ServerStreamingServer[rmetav1.WatchEvent]) error
	CreateNamespace(context.Context, *corev1.Namespace) (*corev1.Namespace, error)
	UpdateNamespace(context.Context, *corev1.Namespace) (*corev1.Namespace, error)
	GetNamespace(context.Context, *rmetav1.GetOptions) (*corev1.Namespace, error)
	ListNamespace(context.Context, *rmetav1.ListOptions) (*corev1.NamespaceList, error)
	DeleteNamespace(context.Context, *rmetav1.DeleteOptions) (*rmetav1.OperationResult, error)
	WatchNamespace(*rmetav1.WatchOptions, grpc.ServerStreamingServer[rmetav1.WatchEvent]) error
	CreateService(context.Context, *corev1.Service) (*corev1.Service, error)
	UpdateService(context.Context, *corev1.Service) (*corev1.Service, error)
	GetService(context.Context, *rmetav1.GetOptions) (*corev1.Service, error)
	ListService(context.Context, *rmetav1.ListOptions) (*corev1.ServiceList, error)
	DeleteService(context.Context, *rmetav1.DeleteOptions) (*rmetav1.OperationResult, error)
	WatchService(*rmetav1.WatchOptions, grpc.ServerStreamingServer[rmetav1.WatchEvent]) error
	CreateSession(context.Context, *corev1.Session) (*corev1.Session, error)
	UpdateSession(context.Context, *corev1.Session) (*corev1.Session, error)
	GetSession(context.Context, *rmetav1.GetOptions) (*corev1.Session, error)
	ListSession(context.Context, *rmetav1.ListOptions) (*corev1.SessionList, error)
	DeleteSession(context.Context, *rmetav1.DeleteOptions) (*rmetav1.OperationResult, error)
	WatchSession(*rmetav1.WatchOptions, grpc.ServerStreamingServer[rmetav1.WatchEvent]) error
	CreateDevice(context.Context, *corev1.Device) (*corev1.Device, error)
	UpdateDevice(context.Context, *corev1.Device) (*corev1.Device, error)
	GetDevice(context.Context, *rmetav1.GetOptions) (*corev1.Device, error)
	ListDevice(context.Context, *rmetav1.ListOptions) (*corev1.DeviceList, error)
	DeleteDevice(context.Context, *rmetav1.DeleteOptions) (*rmetav1.OperationResult, error)
	WatchDevice(*rmetav1.WatchOptions, grpc.ServerStreamingServer[rmetav1.WatchEvent]) error
	CreateSecret(context.Context, *corev1.Secret) (*corev1.Secret, error)
	UpdateSecret(context.Context, *corev1.Secret) (*corev1.Secret, error)
	GetSecret(context.Context, *rmetav1.GetOptions) (*corev1.Secret, error)
	ListSecret(context.Context, *rmetav1.ListOptions) (*corev1.SecretList, error)
	DeleteSecret(context.Context, *rmetav1.DeleteOptions) (*rmetav1.OperationResult, error)
	WatchSecret(*rmetav1.WatchOptions, grpc.ServerStreamingServer[rmetav1.WatchEvent]) error
	CreateCredential(context.Context, *corev1.Credential) (*corev1.Credential, error)
	UpdateCredential(context.Context, *corev1.Credential) (*corev1.Credential, error)
	GetCredential(context.Context, *rmetav1.GetOptions) (*corev1.Credential, error)
	ListCredential(context.Context, *rmetav1.ListOptions) (*corev1.CredentialList, error)
	DeleteCredential(context.Context, *rmetav1.DeleteOptions) (*rmetav1.OperationResult, error)
	WatchCredential(*rmetav1.WatchOptions, grpc.ServerStreamingServer[rmetav1.WatchEvent]) error
	CreateConfig(context.Context, *corev1.Config) (*corev1.Config, error)
	UpdateConfig(context.Context, *corev1.Config) (*corev1.Config, error)
	GetConfig(context.Context, *rmetav1.GetOptions) (*corev1.Config, error)
	ListConfig(context.Context, *rmetav1.ListOptions) (*corev1.ConfigList, error)
	DeleteConfig(context.Context, *rmetav1.DeleteOptions) (*rmetav1.OperationResult, error)
	WatchConfig(*rmetav1.WatchOptions, grpc.ServerStreamingServer[rmetav1.WatchEvent]) error
	CreateIdentityProvider(context.Context, *corev1.IdentityProvider) (*corev1.IdentityProvider, error)
	GetIdentityProvider(context.Context, *rmetav1.GetOptions) (*corev1.IdentityProvider, error)
	ListIdentityProvider(context.Context, *rmetav1.ListOptions) (*corev1.IdentityProviderList, error)
	UpdateIdentityProvider(context.Context, *corev1.IdentityProvider) (*corev1.IdentityProvider, error)
	DeleteIdentityProvider(context.Context, *rmetav1.DeleteOptions) (*rmetav1.OperationResult, error)
	WatchIdentityProvider(*rmetav1.WatchOptions, grpc.ServerStreamingServer[rmetav1.WatchEvent]) error
	CreateRegion(context.Context, *corev1.Region) (*corev1.Region, error)
	UpdateRegion(context.Context, *corev1.Region) (*corev1.Region, error)
	GetRegion(context.Context, *rmetav1.GetOptions) (*corev1.Region, error)
	ListRegion(context.Context, *rmetav1.ListOptions) (*corev1.RegionList, error)
	DeleteRegion(context.Context, *rmetav1.DeleteOptions) (*rmetav1.OperationResult, error)
	WatchRegion(*rmetav1.WatchOptions, grpc.ServerStreamingServer[rmetav1.WatchEvent]) error
	CreateGateway(context.Context, *corev1.Gateway) (*corev1.Gateway, error)
	UpdateGateway(context.Context, *corev1.Gateway) (*corev1.Gateway, error)
	GetGateway(context.Context, *rmetav1.GetOptions) (*corev1.Gateway, error)
	ListGateway(context.Context, *rmetav1.ListOptions) (*corev1.GatewayList, error)
	DeleteGateway(context.Context, *rmetav1.DeleteOptions) (*rmetav1.OperationResult, error)
	WatchGateway(*rmetav1.WatchOptions, grpc.ServerStreamingServer[rmetav1.WatchEvent]) error
	CreatePolicyTrigger(context.Context, *corev1.PolicyTrigger) (*corev1.PolicyTrigger, error)
	UpdatePolicyTrigger(context.Context, *corev1.PolicyTrigger) (*corev1.PolicyTrigger, error)
	GetPolicyTrigger(context.Context, *rmetav1.GetOptions) (*corev1.PolicyTrigger, error)
	ListPolicyTrigger(context.Context, *rmetav1.ListOptions) (*corev1.PolicyTriggerList, error)
	DeletePolicyTrigger(context.Context, *rmetav1.DeleteOptions) (*rmetav1.OperationResult, error)
	WatchPolicyTrigger(*rmetav1.WatchOptions, grpc.ServerStreamingServer[rmetav1.WatchEvent]) error
	mustEmbedUnimplementedResourceServiceServer()
}

// UnimplementedResourceServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedResourceServiceServer struct{}

func (UnimplementedResourceServiceServer) GetClusterConfig(context.Context, *rmetav1.GetOptions) (*corev1.ClusterConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusterConfig not implemented")
}
func (UnimplementedResourceServiceServer) UpdateClusterConfig(context.Context, *corev1.ClusterConfig) (*corev1.ClusterConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateClusterConfig not implemented")
}
func (UnimplementedResourceServiceServer) WatchClusterConfig(*rmetav1.WatchOptions, grpc.ServerStreamingServer[rmetav1.WatchEvent]) error {
	return status.Errorf(codes.Unimplemented, "method WatchClusterConfig not implemented")
}
func (UnimplementedResourceServiceServer) CreatePolicy(context.Context, *corev1.Policy) (*corev1.Policy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePolicy not implemented")
}
func (UnimplementedResourceServiceServer) UpdatePolicy(context.Context, *corev1.Policy) (*corev1.Policy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePolicy not implemented")
}
func (UnimplementedResourceServiceServer) GetPolicy(context.Context, *rmetav1.GetOptions) (*corev1.Policy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPolicy not implemented")
}
func (UnimplementedResourceServiceServer) ListPolicy(context.Context, *rmetav1.ListOptions) (*corev1.PolicyList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPolicy not implemented")
}
func (UnimplementedResourceServiceServer) DeletePolicy(context.Context, *rmetav1.DeleteOptions) (*rmetav1.OperationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePolicy not implemented")
}
func (UnimplementedResourceServiceServer) WatchPolicy(*rmetav1.WatchOptions, grpc.ServerStreamingServer[rmetav1.WatchEvent]) error {
	return status.Errorf(codes.Unimplemented, "method WatchPolicy not implemented")
}
func (UnimplementedResourceServiceServer) CreateUser(context.Context, *corev1.User) (*corev1.User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedResourceServiceServer) UpdateUser(context.Context, *corev1.User) (*corev1.User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedResourceServiceServer) GetUser(context.Context, *rmetav1.GetOptions) (*corev1.User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedResourceServiceServer) ListUser(context.Context, *rmetav1.ListOptions) (*corev1.UserList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUser not implemented")
}
func (UnimplementedResourceServiceServer) DeleteUser(context.Context, *rmetav1.DeleteOptions) (*rmetav1.OperationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedResourceServiceServer) WatchUser(*rmetav1.WatchOptions, grpc.ServerStreamingServer[rmetav1.WatchEvent]) error {
	return status.Errorf(codes.Unimplemented, "method WatchUser not implemented")
}
func (UnimplementedResourceServiceServer) CreateGroup(context.Context, *corev1.Group) (*corev1.Group, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}
func (UnimplementedResourceServiceServer) UpdateGroup(context.Context, *corev1.Group) (*corev1.Group, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroup not implemented")
}
func (UnimplementedResourceServiceServer) GetGroup(context.Context, *rmetav1.GetOptions) (*corev1.Group, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroup not implemented")
}
func (UnimplementedResourceServiceServer) ListGroup(context.Context, *rmetav1.ListOptions) (*corev1.GroupList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGroup not implemented")
}
func (UnimplementedResourceServiceServer) DeleteGroup(context.Context, *rmetav1.DeleteOptions) (*rmetav1.OperationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroup not implemented")
}
func (UnimplementedResourceServiceServer) WatchGroup(*rmetav1.WatchOptions, grpc.ServerStreamingServer[rmetav1.WatchEvent]) error {
	return status.Errorf(codes.Unimplemented, "method WatchGroup not implemented")
}
func (UnimplementedResourceServiceServer) CreateNamespace(context.Context, *corev1.Namespace) (*corev1.Namespace, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNamespace not implemented")
}
func (UnimplementedResourceServiceServer) UpdateNamespace(context.Context, *corev1.Namespace) (*corev1.Namespace, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNamespace not implemented")
}
func (UnimplementedResourceServiceServer) GetNamespace(context.Context, *rmetav1.GetOptions) (*corev1.Namespace, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNamespace not implemented")
}
func (UnimplementedResourceServiceServer) ListNamespace(context.Context, *rmetav1.ListOptions) (*corev1.NamespaceList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNamespace not implemented")
}
func (UnimplementedResourceServiceServer) DeleteNamespace(context.Context, *rmetav1.DeleteOptions) (*rmetav1.OperationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNamespace not implemented")
}
func (UnimplementedResourceServiceServer) WatchNamespace(*rmetav1.WatchOptions, grpc.ServerStreamingServer[rmetav1.WatchEvent]) error {
	return status.Errorf(codes.Unimplemented, "method WatchNamespace not implemented")
}
func (UnimplementedResourceServiceServer) CreateService(context.Context, *corev1.Service) (*corev1.Service, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateService not implemented")
}
func (UnimplementedResourceServiceServer) UpdateService(context.Context, *corev1.Service) (*corev1.Service, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateService not implemented")
}
func (UnimplementedResourceServiceServer) GetService(context.Context, *rmetav1.GetOptions) (*corev1.Service, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetService not implemented")
}
func (UnimplementedResourceServiceServer) ListService(context.Context, *rmetav1.ListOptions) (*corev1.ServiceList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListService not implemented")
}
func (UnimplementedResourceServiceServer) DeleteService(context.Context, *rmetav1.DeleteOptions) (*rmetav1.OperationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteService not implemented")
}
func (UnimplementedResourceServiceServer) WatchService(*rmetav1.WatchOptions, grpc.ServerStreamingServer[rmetav1.WatchEvent]) error {
	return status.Errorf(codes.Unimplemented, "method WatchService not implemented")
}
func (UnimplementedResourceServiceServer) CreateSession(context.Context, *corev1.Session) (*corev1.Session, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSession not implemented")
}
func (UnimplementedResourceServiceServer) UpdateSession(context.Context, *corev1.Session) (*corev1.Session, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSession not implemented")
}
func (UnimplementedResourceServiceServer) GetSession(context.Context, *rmetav1.GetOptions) (*corev1.Session, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSession not implemented")
}
func (UnimplementedResourceServiceServer) ListSession(context.Context, *rmetav1.ListOptions) (*corev1.SessionList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSession not implemented")
}
func (UnimplementedResourceServiceServer) DeleteSession(context.Context, *rmetav1.DeleteOptions) (*rmetav1.OperationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSession not implemented")
}
func (UnimplementedResourceServiceServer) WatchSession(*rmetav1.WatchOptions, grpc.ServerStreamingServer[rmetav1.WatchEvent]) error {
	return status.Errorf(codes.Unimplemented, "method WatchSession not implemented")
}
func (UnimplementedResourceServiceServer) CreateDevice(context.Context, *corev1.Device) (*corev1.Device, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDevice not implemented")
}
func (UnimplementedResourceServiceServer) UpdateDevice(context.Context, *corev1.Device) (*corev1.Device, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDevice not implemented")
}
func (UnimplementedResourceServiceServer) GetDevice(context.Context, *rmetav1.GetOptions) (*corev1.Device, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDevice not implemented")
}
func (UnimplementedResourceServiceServer) ListDevice(context.Context, *rmetav1.ListOptions) (*corev1.DeviceList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDevice not implemented")
}
func (UnimplementedResourceServiceServer) DeleteDevice(context.Context, *rmetav1.DeleteOptions) (*rmetav1.OperationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDevice not implemented")
}
func (UnimplementedResourceServiceServer) WatchDevice(*rmetav1.WatchOptions, grpc.ServerStreamingServer[rmetav1.WatchEvent]) error {
	return status.Errorf(codes.Unimplemented, "method WatchDevice not implemented")
}
func (UnimplementedResourceServiceServer) CreateSecret(context.Context, *corev1.Secret) (*corev1.Secret, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSecret not implemented")
}
func (UnimplementedResourceServiceServer) UpdateSecret(context.Context, *corev1.Secret) (*corev1.Secret, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSecret not implemented")
}
func (UnimplementedResourceServiceServer) GetSecret(context.Context, *rmetav1.GetOptions) (*corev1.Secret, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSecret not implemented")
}
func (UnimplementedResourceServiceServer) ListSecret(context.Context, *rmetav1.ListOptions) (*corev1.SecretList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSecret not implemented")
}
func (UnimplementedResourceServiceServer) DeleteSecret(context.Context, *rmetav1.DeleteOptions) (*rmetav1.OperationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSecret not implemented")
}
func (UnimplementedResourceServiceServer) WatchSecret(*rmetav1.WatchOptions, grpc.ServerStreamingServer[rmetav1.WatchEvent]) error {
	return status.Errorf(codes.Unimplemented, "method WatchSecret not implemented")
}
func (UnimplementedResourceServiceServer) CreateCredential(context.Context, *corev1.Credential) (*corev1.Credential, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCredential not implemented")
}
func (UnimplementedResourceServiceServer) UpdateCredential(context.Context, *corev1.Credential) (*corev1.Credential, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCredential not implemented")
}
func (UnimplementedResourceServiceServer) GetCredential(context.Context, *rmetav1.GetOptions) (*corev1.Credential, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCredential not implemented")
}
func (UnimplementedResourceServiceServer) ListCredential(context.Context, *rmetav1.ListOptions) (*corev1.CredentialList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCredential not implemented")
}
func (UnimplementedResourceServiceServer) DeleteCredential(context.Context, *rmetav1.DeleteOptions) (*rmetav1.OperationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCredential not implemented")
}
func (UnimplementedResourceServiceServer) WatchCredential(*rmetav1.WatchOptions, grpc.ServerStreamingServer[rmetav1.WatchEvent]) error {
	return status.Errorf(codes.Unimplemented, "method WatchCredential not implemented")
}
func (UnimplementedResourceServiceServer) CreateConfig(context.Context, *corev1.Config) (*corev1.Config, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConfig not implemented")
}
func (UnimplementedResourceServiceServer) UpdateConfig(context.Context, *corev1.Config) (*corev1.Config, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConfig not implemented")
}
func (UnimplementedResourceServiceServer) GetConfig(context.Context, *rmetav1.GetOptions) (*corev1.Config, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfig not implemented")
}
func (UnimplementedResourceServiceServer) ListConfig(context.Context, *rmetav1.ListOptions) (*corev1.ConfigList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConfig not implemented")
}
func (UnimplementedResourceServiceServer) DeleteConfig(context.Context, *rmetav1.DeleteOptions) (*rmetav1.OperationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConfig not implemented")
}
func (UnimplementedResourceServiceServer) WatchConfig(*rmetav1.WatchOptions, grpc.ServerStreamingServer[rmetav1.WatchEvent]) error {
	return status.Errorf(codes.Unimplemented, "method WatchConfig not implemented")
}
func (UnimplementedResourceServiceServer) CreateIdentityProvider(context.Context, *corev1.IdentityProvider) (*corev1.IdentityProvider, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIdentityProvider not implemented")
}
func (UnimplementedResourceServiceServer) GetIdentityProvider(context.Context, *rmetav1.GetOptions) (*corev1.IdentityProvider, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIdentityProvider not implemented")
}
func (UnimplementedResourceServiceServer) ListIdentityProvider(context.Context, *rmetav1.ListOptions) (*corev1.IdentityProviderList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIdentityProvider not implemented")
}
func (UnimplementedResourceServiceServer) UpdateIdentityProvider(context.Context, *corev1.IdentityProvider) (*corev1.IdentityProvider, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIdentityProvider not implemented")
}
func (UnimplementedResourceServiceServer) DeleteIdentityProvider(context.Context, *rmetav1.DeleteOptions) (*rmetav1.OperationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIdentityProvider not implemented")
}
func (UnimplementedResourceServiceServer) WatchIdentityProvider(*rmetav1.WatchOptions, grpc.ServerStreamingServer[rmetav1.WatchEvent]) error {
	return status.Errorf(codes.Unimplemented, "method WatchIdentityProvider not implemented")
}
func (UnimplementedResourceServiceServer) CreateRegion(context.Context, *corev1.Region) (*corev1.Region, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRegion not implemented")
}
func (UnimplementedResourceServiceServer) UpdateRegion(context.Context, *corev1.Region) (*corev1.Region, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRegion not implemented")
}
func (UnimplementedResourceServiceServer) GetRegion(context.Context, *rmetav1.GetOptions) (*corev1.Region, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRegion not implemented")
}
func (UnimplementedResourceServiceServer) ListRegion(context.Context, *rmetav1.ListOptions) (*corev1.RegionList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRegion not implemented")
}
func (UnimplementedResourceServiceServer) DeleteRegion(context.Context, *rmetav1.DeleteOptions) (*rmetav1.OperationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRegion not implemented")
}
func (UnimplementedResourceServiceServer) WatchRegion(*rmetav1.WatchOptions, grpc.ServerStreamingServer[rmetav1.WatchEvent]) error {
	return status.Errorf(codes.Unimplemented, "method WatchRegion not implemented")
}
func (UnimplementedResourceServiceServer) CreateGateway(context.Context, *corev1.Gateway) (*corev1.Gateway, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGateway not implemented")
}
func (UnimplementedResourceServiceServer) UpdateGateway(context.Context, *corev1.Gateway) (*corev1.Gateway, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGateway not implemented")
}
func (UnimplementedResourceServiceServer) GetGateway(context.Context, *rmetav1.GetOptions) (*corev1.Gateway, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGateway not implemented")
}
func (UnimplementedResourceServiceServer) ListGateway(context.Context, *rmetav1.ListOptions) (*corev1.GatewayList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGateway not implemented")
}
func (UnimplementedResourceServiceServer) DeleteGateway(context.Context, *rmetav1.DeleteOptions) (*rmetav1.OperationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGateway not implemented")
}
func (UnimplementedResourceServiceServer) WatchGateway(*rmetav1.WatchOptions, grpc.ServerStreamingServer[rmetav1.WatchEvent]) error {
	return status.Errorf(codes.Unimplemented, "method WatchGateway not implemented")
}
func (UnimplementedResourceServiceServer) CreatePolicyTrigger(context.Context, *corev1.PolicyTrigger) (*corev1.PolicyTrigger, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePolicyTrigger not implemented")
}
func (UnimplementedResourceServiceServer) UpdatePolicyTrigger(context.Context, *corev1.PolicyTrigger) (*corev1.PolicyTrigger, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePolicyTrigger not implemented")
}
func (UnimplementedResourceServiceServer) GetPolicyTrigger(context.Context, *rmetav1.GetOptions) (*corev1.PolicyTrigger, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPolicyTrigger not implemented")
}
func (UnimplementedResourceServiceServer) ListPolicyTrigger(context.Context, *rmetav1.ListOptions) (*corev1.PolicyTriggerList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPolicyTrigger not implemented")
}
func (UnimplementedResourceServiceServer) DeletePolicyTrigger(context.Context, *rmetav1.DeleteOptions) (*rmetav1.OperationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePolicyTrigger not implemented")
}
func (UnimplementedResourceServiceServer) WatchPolicyTrigger(*rmetav1.WatchOptions, grpc.ServerStreamingServer[rmetav1.WatchEvent]) error {
	return status.Errorf(codes.Unimplemented, "method WatchPolicyTrigger not implemented")
}
func (UnimplementedResourceServiceServer) mustEmbedUnimplementedResourceServiceServer() {}
func (UnimplementedResourceServiceServer) testEmbeddedByValue()                         {}

// UnsafeResourceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ResourceServiceServer will
// result in compilation errors.
type UnsafeResourceServiceServer interface {
	mustEmbedUnimplementedResourceServiceServer()
}

func RegisterResourceServiceServer(s grpc.ServiceRegistrar, srv ResourceServiceServer) {
	// If the following call pancis, it indicates UnimplementedResourceServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ResourceService_ServiceDesc, srv)
}

func _ResourceService_GetClusterConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rmetav1.GetOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).GetClusterConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_GetClusterConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).GetClusterConfig(ctx, req.(*rmetav1.GetOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_UpdateClusterConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(corev1.ClusterConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).UpdateClusterConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_UpdateClusterConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).UpdateClusterConfig(ctx, req.(*corev1.ClusterConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_WatchClusterConfig_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(rmetav1.WatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ResourceServiceServer).WatchClusterConfig(m, &grpc.GenericServerStream[rmetav1.WatchOptions, rmetav1.WatchEvent]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ResourceService_WatchClusterConfigServer = grpc.ServerStreamingServer[rmetav1.WatchEvent]

func _ResourceService_CreatePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(corev1.Policy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).CreatePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_CreatePolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).CreatePolicy(ctx, req.(*corev1.Policy))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_UpdatePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(corev1.Policy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).UpdatePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_UpdatePolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).UpdatePolicy(ctx, req.(*corev1.Policy))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_GetPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rmetav1.GetOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).GetPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_GetPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).GetPolicy(ctx, req.(*rmetav1.GetOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_ListPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rmetav1.ListOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).ListPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_ListPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).ListPolicy(ctx, req.(*rmetav1.ListOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_DeletePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rmetav1.DeleteOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).DeletePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_DeletePolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).DeletePolicy(ctx, req.(*rmetav1.DeleteOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_WatchPolicy_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(rmetav1.WatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ResourceServiceServer).WatchPolicy(m, &grpc.GenericServerStream[rmetav1.WatchOptions, rmetav1.WatchEvent]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ResourceService_WatchPolicyServer = grpc.ServerStreamingServer[rmetav1.WatchEvent]

func _ResourceService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(corev1.User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).CreateUser(ctx, req.(*corev1.User))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(corev1.User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).UpdateUser(ctx, req.(*corev1.User))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rmetav1.GetOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).GetUser(ctx, req.(*rmetav1.GetOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_ListUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rmetav1.ListOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).ListUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_ListUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).ListUser(ctx, req.(*rmetav1.ListOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rmetav1.DeleteOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).DeleteUser(ctx, req.(*rmetav1.DeleteOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_WatchUser_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(rmetav1.WatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ResourceServiceServer).WatchUser(m, &grpc.GenericServerStream[rmetav1.WatchOptions, rmetav1.WatchEvent]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ResourceService_WatchUserServer = grpc.ServerStreamingServer[rmetav1.WatchEvent]

func _ResourceService_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(corev1.Group)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_CreateGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).CreateGroup(ctx, req.(*corev1.Group))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_UpdateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(corev1.Group)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).UpdateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_UpdateGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).UpdateGroup(ctx, req.(*corev1.Group))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_GetGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rmetav1.GetOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).GetGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_GetGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).GetGroup(ctx, req.(*rmetav1.GetOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_ListGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rmetav1.ListOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).ListGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_ListGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).ListGroup(ctx, req.(*rmetav1.ListOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_DeleteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rmetav1.DeleteOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).DeleteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_DeleteGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).DeleteGroup(ctx, req.(*rmetav1.DeleteOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_WatchGroup_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(rmetav1.WatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ResourceServiceServer).WatchGroup(m, &grpc.GenericServerStream[rmetav1.WatchOptions, rmetav1.WatchEvent]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ResourceService_WatchGroupServer = grpc.ServerStreamingServer[rmetav1.WatchEvent]

func _ResourceService_CreateNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(corev1.Namespace)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).CreateNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_CreateNamespace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).CreateNamespace(ctx, req.(*corev1.Namespace))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_UpdateNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(corev1.Namespace)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).UpdateNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_UpdateNamespace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).UpdateNamespace(ctx, req.(*corev1.Namespace))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_GetNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rmetav1.GetOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).GetNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_GetNamespace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).GetNamespace(ctx, req.(*rmetav1.GetOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_ListNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rmetav1.ListOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).ListNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_ListNamespace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).ListNamespace(ctx, req.(*rmetav1.ListOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_DeleteNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rmetav1.DeleteOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).DeleteNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_DeleteNamespace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).DeleteNamespace(ctx, req.(*rmetav1.DeleteOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_WatchNamespace_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(rmetav1.WatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ResourceServiceServer).WatchNamespace(m, &grpc.GenericServerStream[rmetav1.WatchOptions, rmetav1.WatchEvent]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ResourceService_WatchNamespaceServer = grpc.ServerStreamingServer[rmetav1.WatchEvent]

func _ResourceService_CreateService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(corev1.Service)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).CreateService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_CreateService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).CreateService(ctx, req.(*corev1.Service))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_UpdateService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(corev1.Service)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).UpdateService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_UpdateService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).UpdateService(ctx, req.(*corev1.Service))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_GetService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rmetav1.GetOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).GetService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_GetService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).GetService(ctx, req.(*rmetav1.GetOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_ListService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rmetav1.ListOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).ListService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_ListService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).ListService(ctx, req.(*rmetav1.ListOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_DeleteService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rmetav1.DeleteOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).DeleteService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_DeleteService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).DeleteService(ctx, req.(*rmetav1.DeleteOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_WatchService_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(rmetav1.WatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ResourceServiceServer).WatchService(m, &grpc.GenericServerStream[rmetav1.WatchOptions, rmetav1.WatchEvent]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ResourceService_WatchServiceServer = grpc.ServerStreamingServer[rmetav1.WatchEvent]

func _ResourceService_CreateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(corev1.Session)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).CreateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_CreateSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).CreateSession(ctx, req.(*corev1.Session))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_UpdateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(corev1.Session)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).UpdateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_UpdateSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).UpdateSession(ctx, req.(*corev1.Session))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_GetSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rmetav1.GetOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).GetSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_GetSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).GetSession(ctx, req.(*rmetav1.GetOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_ListSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rmetav1.ListOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).ListSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_ListSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).ListSession(ctx, req.(*rmetav1.ListOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_DeleteSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rmetav1.DeleteOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).DeleteSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_DeleteSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).DeleteSession(ctx, req.(*rmetav1.DeleteOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_WatchSession_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(rmetav1.WatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ResourceServiceServer).WatchSession(m, &grpc.GenericServerStream[rmetav1.WatchOptions, rmetav1.WatchEvent]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ResourceService_WatchSessionServer = grpc.ServerStreamingServer[rmetav1.WatchEvent]

func _ResourceService_CreateDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(corev1.Device)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).CreateDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_CreateDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).CreateDevice(ctx, req.(*corev1.Device))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_UpdateDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(corev1.Device)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).UpdateDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_UpdateDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).UpdateDevice(ctx, req.(*corev1.Device))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_GetDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rmetav1.GetOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).GetDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_GetDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).GetDevice(ctx, req.(*rmetav1.GetOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_ListDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rmetav1.ListOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).ListDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_ListDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).ListDevice(ctx, req.(*rmetav1.ListOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_DeleteDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rmetav1.DeleteOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).DeleteDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_DeleteDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).DeleteDevice(ctx, req.(*rmetav1.DeleteOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_WatchDevice_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(rmetav1.WatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ResourceServiceServer).WatchDevice(m, &grpc.GenericServerStream[rmetav1.WatchOptions, rmetav1.WatchEvent]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ResourceService_WatchDeviceServer = grpc.ServerStreamingServer[rmetav1.WatchEvent]

func _ResourceService_CreateSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(corev1.Secret)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).CreateSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_CreateSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).CreateSecret(ctx, req.(*corev1.Secret))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_UpdateSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(corev1.Secret)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).UpdateSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_UpdateSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).UpdateSecret(ctx, req.(*corev1.Secret))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_GetSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rmetav1.GetOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).GetSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_GetSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).GetSecret(ctx, req.(*rmetav1.GetOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_ListSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rmetav1.ListOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).ListSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_ListSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).ListSecret(ctx, req.(*rmetav1.ListOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_DeleteSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rmetav1.DeleteOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).DeleteSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_DeleteSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).DeleteSecret(ctx, req.(*rmetav1.DeleteOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_WatchSecret_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(rmetav1.WatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ResourceServiceServer).WatchSecret(m, &grpc.GenericServerStream[rmetav1.WatchOptions, rmetav1.WatchEvent]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ResourceService_WatchSecretServer = grpc.ServerStreamingServer[rmetav1.WatchEvent]

func _ResourceService_CreateCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(corev1.Credential)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).CreateCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_CreateCredential_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).CreateCredential(ctx, req.(*corev1.Credential))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_UpdateCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(corev1.Credential)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).UpdateCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_UpdateCredential_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).UpdateCredential(ctx, req.(*corev1.Credential))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_GetCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rmetav1.GetOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).GetCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_GetCredential_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).GetCredential(ctx, req.(*rmetav1.GetOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_ListCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rmetav1.ListOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).ListCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_ListCredential_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).ListCredential(ctx, req.(*rmetav1.ListOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_DeleteCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rmetav1.DeleteOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).DeleteCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_DeleteCredential_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).DeleteCredential(ctx, req.(*rmetav1.DeleteOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_WatchCredential_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(rmetav1.WatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ResourceServiceServer).WatchCredential(m, &grpc.GenericServerStream[rmetav1.WatchOptions, rmetav1.WatchEvent]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ResourceService_WatchCredentialServer = grpc.ServerStreamingServer[rmetav1.WatchEvent]

func _ResourceService_CreateConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(corev1.Config)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).CreateConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_CreateConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).CreateConfig(ctx, req.(*corev1.Config))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_UpdateConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(corev1.Config)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).UpdateConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_UpdateConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).UpdateConfig(ctx, req.(*corev1.Config))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rmetav1.GetOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_GetConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).GetConfig(ctx, req.(*rmetav1.GetOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_ListConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rmetav1.ListOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).ListConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_ListConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).ListConfig(ctx, req.(*rmetav1.ListOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_DeleteConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rmetav1.DeleteOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).DeleteConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_DeleteConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).DeleteConfig(ctx, req.(*rmetav1.DeleteOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_WatchConfig_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(rmetav1.WatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ResourceServiceServer).WatchConfig(m, &grpc.GenericServerStream[rmetav1.WatchOptions, rmetav1.WatchEvent]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ResourceService_WatchConfigServer = grpc.ServerStreamingServer[rmetav1.WatchEvent]

func _ResourceService_CreateIdentityProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(corev1.IdentityProvider)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).CreateIdentityProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_CreateIdentityProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).CreateIdentityProvider(ctx, req.(*corev1.IdentityProvider))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_GetIdentityProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rmetav1.GetOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).GetIdentityProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_GetIdentityProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).GetIdentityProvider(ctx, req.(*rmetav1.GetOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_ListIdentityProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rmetav1.ListOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).ListIdentityProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_ListIdentityProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).ListIdentityProvider(ctx, req.(*rmetav1.ListOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_UpdateIdentityProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(corev1.IdentityProvider)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).UpdateIdentityProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_UpdateIdentityProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).UpdateIdentityProvider(ctx, req.(*corev1.IdentityProvider))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_DeleteIdentityProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rmetav1.DeleteOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).DeleteIdentityProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_DeleteIdentityProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).DeleteIdentityProvider(ctx, req.(*rmetav1.DeleteOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_WatchIdentityProvider_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(rmetav1.WatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ResourceServiceServer).WatchIdentityProvider(m, &grpc.GenericServerStream[rmetav1.WatchOptions, rmetav1.WatchEvent]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ResourceService_WatchIdentityProviderServer = grpc.ServerStreamingServer[rmetav1.WatchEvent]

func _ResourceService_CreateRegion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(corev1.Region)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).CreateRegion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_CreateRegion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).CreateRegion(ctx, req.(*corev1.Region))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_UpdateRegion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(corev1.Region)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).UpdateRegion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_UpdateRegion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).UpdateRegion(ctx, req.(*corev1.Region))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_GetRegion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rmetav1.GetOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).GetRegion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_GetRegion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).GetRegion(ctx, req.(*rmetav1.GetOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_ListRegion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rmetav1.ListOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).ListRegion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_ListRegion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).ListRegion(ctx, req.(*rmetav1.ListOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_DeleteRegion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rmetav1.DeleteOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).DeleteRegion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_DeleteRegion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).DeleteRegion(ctx, req.(*rmetav1.DeleteOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_WatchRegion_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(rmetav1.WatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ResourceServiceServer).WatchRegion(m, &grpc.GenericServerStream[rmetav1.WatchOptions, rmetav1.WatchEvent]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ResourceService_WatchRegionServer = grpc.ServerStreamingServer[rmetav1.WatchEvent]

func _ResourceService_CreateGateway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(corev1.Gateway)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).CreateGateway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_CreateGateway_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).CreateGateway(ctx, req.(*corev1.Gateway))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_UpdateGateway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(corev1.Gateway)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).UpdateGateway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_UpdateGateway_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).UpdateGateway(ctx, req.(*corev1.Gateway))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_GetGateway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rmetav1.GetOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).GetGateway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_GetGateway_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).GetGateway(ctx, req.(*rmetav1.GetOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_ListGateway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rmetav1.ListOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).ListGateway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_ListGateway_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).ListGateway(ctx, req.(*rmetav1.ListOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_DeleteGateway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rmetav1.DeleteOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).DeleteGateway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_DeleteGateway_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).DeleteGateway(ctx, req.(*rmetav1.DeleteOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_WatchGateway_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(rmetav1.WatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ResourceServiceServer).WatchGateway(m, &grpc.GenericServerStream[rmetav1.WatchOptions, rmetav1.WatchEvent]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ResourceService_WatchGatewayServer = grpc.ServerStreamingServer[rmetav1.WatchEvent]

func _ResourceService_CreatePolicyTrigger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(corev1.PolicyTrigger)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).CreatePolicyTrigger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_CreatePolicyTrigger_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).CreatePolicyTrigger(ctx, req.(*corev1.PolicyTrigger))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_UpdatePolicyTrigger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(corev1.PolicyTrigger)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).UpdatePolicyTrigger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_UpdatePolicyTrigger_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).UpdatePolicyTrigger(ctx, req.(*corev1.PolicyTrigger))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_GetPolicyTrigger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rmetav1.GetOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).GetPolicyTrigger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_GetPolicyTrigger_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).GetPolicyTrigger(ctx, req.(*rmetav1.GetOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_ListPolicyTrigger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rmetav1.ListOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).ListPolicyTrigger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_ListPolicyTrigger_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).ListPolicyTrigger(ctx, req.(*rmetav1.ListOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_DeletePolicyTrigger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rmetav1.DeleteOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).DeletePolicyTrigger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_DeletePolicyTrigger_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).DeletePolicyTrigger(ctx, req.(*rmetav1.DeleteOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_WatchPolicyTrigger_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(rmetav1.WatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ResourceServiceServer).WatchPolicyTrigger(m, &grpc.GenericServerStream[rmetav1.WatchOptions, rmetav1.WatchEvent]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ResourceService_WatchPolicyTriggerServer = grpc.ServerStreamingServer[rmetav1.WatchEvent]

// ResourceService_ServiceDesc is the grpc.ServiceDesc for ResourceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ResourceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "octelium.api.rsc.core.v1.ResourceService",
	HandlerType: (*ResourceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetClusterConfig",
			Handler:    _ResourceService_GetClusterConfig_Handler,
		},
		{
			MethodName: "UpdateClusterConfig",
			Handler:    _ResourceService_UpdateClusterConfig_Handler,
		},
		{
			MethodName: "CreatePolicy",
			Handler:    _ResourceService_CreatePolicy_Handler,
		},
		{
			MethodName: "UpdatePolicy",
			Handler:    _ResourceService_UpdatePolicy_Handler,
		},
		{
			MethodName: "GetPolicy",
			Handler:    _ResourceService_GetPolicy_Handler,
		},
		{
			MethodName: "ListPolicy",
			Handler:    _ResourceService_ListPolicy_Handler,
		},
		{
			MethodName: "DeletePolicy",
			Handler:    _ResourceService_DeletePolicy_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _ResourceService_CreateUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _ResourceService_UpdateUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _ResourceService_GetUser_Handler,
		},
		{
			MethodName: "ListUser",
			Handler:    _ResourceService_ListUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _ResourceService_DeleteUser_Handler,
		},
		{
			MethodName: "CreateGroup",
			Handler:    _ResourceService_CreateGroup_Handler,
		},
		{
			MethodName: "UpdateGroup",
			Handler:    _ResourceService_UpdateGroup_Handler,
		},
		{
			MethodName: "GetGroup",
			Handler:    _ResourceService_GetGroup_Handler,
		},
		{
			MethodName: "ListGroup",
			Handler:    _ResourceService_ListGroup_Handler,
		},
		{
			MethodName: "DeleteGroup",
			Handler:    _ResourceService_DeleteGroup_Handler,
		},
		{
			MethodName: "CreateNamespace",
			Handler:    _ResourceService_CreateNamespace_Handler,
		},
		{
			MethodName: "UpdateNamespace",
			Handler:    _ResourceService_UpdateNamespace_Handler,
		},
		{
			MethodName: "GetNamespace",
			Handler:    _ResourceService_GetNamespace_Handler,
		},
		{
			MethodName: "ListNamespace",
			Handler:    _ResourceService_ListNamespace_Handler,
		},
		{
			MethodName: "DeleteNamespace",
			Handler:    _ResourceService_DeleteNamespace_Handler,
		},
		{
			MethodName: "CreateService",
			Handler:    _ResourceService_CreateService_Handler,
		},
		{
			MethodName: "UpdateService",
			Handler:    _ResourceService_UpdateService_Handler,
		},
		{
			MethodName: "GetService",
			Handler:    _ResourceService_GetService_Handler,
		},
		{
			MethodName: "ListService",
			Handler:    _ResourceService_ListService_Handler,
		},
		{
			MethodName: "DeleteService",
			Handler:    _ResourceService_DeleteService_Handler,
		},
		{
			MethodName: "CreateSession",
			Handler:    _ResourceService_CreateSession_Handler,
		},
		{
			MethodName: "UpdateSession",
			Handler:    _ResourceService_UpdateSession_Handler,
		},
		{
			MethodName: "GetSession",
			Handler:    _ResourceService_GetSession_Handler,
		},
		{
			MethodName: "ListSession",
			Handler:    _ResourceService_ListSession_Handler,
		},
		{
			MethodName: "DeleteSession",
			Handler:    _ResourceService_DeleteSession_Handler,
		},
		{
			MethodName: "CreateDevice",
			Handler:    _ResourceService_CreateDevice_Handler,
		},
		{
			MethodName: "UpdateDevice",
			Handler:    _ResourceService_UpdateDevice_Handler,
		},
		{
			MethodName: "GetDevice",
			Handler:    _ResourceService_GetDevice_Handler,
		},
		{
			MethodName: "ListDevice",
			Handler:    _ResourceService_ListDevice_Handler,
		},
		{
			MethodName: "DeleteDevice",
			Handler:    _ResourceService_DeleteDevice_Handler,
		},
		{
			MethodName: "CreateSecret",
			Handler:    _ResourceService_CreateSecret_Handler,
		},
		{
			MethodName: "UpdateSecret",
			Handler:    _ResourceService_UpdateSecret_Handler,
		},
		{
			MethodName: "GetSecret",
			Handler:    _ResourceService_GetSecret_Handler,
		},
		{
			MethodName: "ListSecret",
			Handler:    _ResourceService_ListSecret_Handler,
		},
		{
			MethodName: "DeleteSecret",
			Handler:    _ResourceService_DeleteSecret_Handler,
		},
		{
			MethodName: "CreateCredential",
			Handler:    _ResourceService_CreateCredential_Handler,
		},
		{
			MethodName: "UpdateCredential",
			Handler:    _ResourceService_UpdateCredential_Handler,
		},
		{
			MethodName: "GetCredential",
			Handler:    _ResourceService_GetCredential_Handler,
		},
		{
			MethodName: "ListCredential",
			Handler:    _ResourceService_ListCredential_Handler,
		},
		{
			MethodName: "DeleteCredential",
			Handler:    _ResourceService_DeleteCredential_Handler,
		},
		{
			MethodName: "CreateConfig",
			Handler:    _ResourceService_CreateConfig_Handler,
		},
		{
			MethodName: "UpdateConfig",
			Handler:    _ResourceService_UpdateConfig_Handler,
		},
		{
			MethodName: "GetConfig",
			Handler:    _ResourceService_GetConfig_Handler,
		},
		{
			MethodName: "ListConfig",
			Handler:    _ResourceService_ListConfig_Handler,
		},
		{
			MethodName: "DeleteConfig",
			Handler:    _ResourceService_DeleteConfig_Handler,
		},
		{
			MethodName: "CreateIdentityProvider",
			Handler:    _ResourceService_CreateIdentityProvider_Handler,
		},
		{
			MethodName: "GetIdentityProvider",
			Handler:    _ResourceService_GetIdentityProvider_Handler,
		},
		{
			MethodName: "ListIdentityProvider",
			Handler:    _ResourceService_ListIdentityProvider_Handler,
		},
		{
			MethodName: "UpdateIdentityProvider",
			Handler:    _ResourceService_UpdateIdentityProvider_Handler,
		},
		{
			MethodName: "DeleteIdentityProvider",
			Handler:    _ResourceService_DeleteIdentityProvider_Handler,
		},
		{
			MethodName: "CreateRegion",
			Handler:    _ResourceService_CreateRegion_Handler,
		},
		{
			MethodName: "UpdateRegion",
			Handler:    _ResourceService_UpdateRegion_Handler,
		},
		{
			MethodName: "GetRegion",
			Handler:    _ResourceService_GetRegion_Handler,
		},
		{
			MethodName: "ListRegion",
			Handler:    _ResourceService_ListRegion_Handler,
		},
		{
			MethodName: "DeleteRegion",
			Handler:    _ResourceService_DeleteRegion_Handler,
		},
		{
			MethodName: "CreateGateway",
			Handler:    _ResourceService_CreateGateway_Handler,
		},
		{
			MethodName: "UpdateGateway",
			Handler:    _ResourceService_UpdateGateway_Handler,
		},
		{
			MethodName: "GetGateway",
			Handler:    _ResourceService_GetGateway_Handler,
		},
		{
			MethodName: "ListGateway",
			Handler:    _ResourceService_ListGateway_Handler,
		},
		{
			MethodName: "DeleteGateway",
			Handler:    _ResourceService_DeleteGateway_Handler,
		},
		{
			MethodName: "CreatePolicyTrigger",
			Handler:    _ResourceService_CreatePolicyTrigger_Handler,
		},
		{
			MethodName: "UpdatePolicyTrigger",
			Handler:    _ResourceService_UpdatePolicyTrigger_Handler,
		},
		{
			MethodName: "GetPolicyTrigger",
			Handler:    _ResourceService_GetPolicyTrigger_Handler,
		},
		{
			MethodName: "ListPolicyTrigger",
			Handler:    _ResourceService_ListPolicyTrigger_Handler,
		},
		{
			MethodName: "DeletePolicyTrigger",
			Handler:    _ResourceService_DeletePolicyTrigger_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchClusterConfig",
			Handler:       _ResourceService_WatchClusterConfig_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchPolicy",
			Handler:       _ResourceService_WatchPolicy_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchUser",
			Handler:       _ResourceService_WatchUser_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchGroup",
			Handler:       _ResourceService_WatchGroup_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchNamespace",
			Handler:       _ResourceService_WatchNamespace_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchService",
			Handler:       _ResourceService_WatchService_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchSession",
			Handler:       _ResourceService_WatchSession_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchDevice",
			Handler:       _ResourceService_WatchDevice_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchSecret",
			Handler:       _ResourceService_WatchSecret_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchCredential",
			Handler:       _ResourceService_WatchCredential_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchConfig",
			Handler:       _ResourceService_WatchConfig_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchIdentityProvider",
			Handler:       _ResourceService_WatchIdentityProvider_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchRegion",
			Handler:       _ResourceService_WatchRegion_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchGateway",
			Handler:       _ResourceService_WatchGateway_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchPolicyTrigger",
			Handler:       _ResourceService_WatchPolicyTrigger_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "rcorev1.proto",
}
