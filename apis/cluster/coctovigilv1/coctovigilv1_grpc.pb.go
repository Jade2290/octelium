// Copyright Octelium Labs, LLC. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: coctovigilv1.proto

package coctovigilv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	InternalService_AuthenticateAndAuthorize_FullMethodName    = "/octelium.api.cluster.octovigil.v1.InternalService/AuthenticateAndAuthorize"
	InternalService_Authorize_FullMethodName                   = "/octelium.api.cluster.octovigil.v1.InternalService/Authorize"
	InternalService_GetDownstreamFromSessionUID_FullMethodName = "/octelium.api.cluster.octovigil.v1.InternalService/GetDownstreamFromSessionUID"
	InternalService_Evaluate_FullMethodName                    = "/octelium.api.cluster.octovigil.v1.InternalService/Evaluate"
)

// InternalServiceClient is the client API for InternalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InternalServiceClient interface {
	AuthenticateAndAuthorize(ctx context.Context, in *AuthenticateAndAuthorizeRequest, opts ...grpc.CallOption) (*AuthenticateAndAuthorizeResponse, error)
	Authorize(ctx context.Context, in *AuthorizeRequest, opts ...grpc.CallOption) (*AuthorizeResponse, error)
	GetDownstreamFromSessionUID(ctx context.Context, in *GetDownstreamFromSessionUIDRequest, opts ...grpc.CallOption) (*GetDownstreamFromSessionUIDResponse, error)
	Evaluate(ctx context.Context, in *EvaluateRequest, opts ...grpc.CallOption) (*EvaluateResponse, error)
}

type internalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInternalServiceClient(cc grpc.ClientConnInterface) InternalServiceClient {
	return &internalServiceClient{cc}
}

func (c *internalServiceClient) AuthenticateAndAuthorize(ctx context.Context, in *AuthenticateAndAuthorizeRequest, opts ...grpc.CallOption) (*AuthenticateAndAuthorizeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthenticateAndAuthorizeResponse)
	err := c.cc.Invoke(ctx, InternalService_AuthenticateAndAuthorize_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalServiceClient) Authorize(ctx context.Context, in *AuthorizeRequest, opts ...grpc.CallOption) (*AuthorizeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthorizeResponse)
	err := c.cc.Invoke(ctx, InternalService_Authorize_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalServiceClient) GetDownstreamFromSessionUID(ctx context.Context, in *GetDownstreamFromSessionUIDRequest, opts ...grpc.CallOption) (*GetDownstreamFromSessionUIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDownstreamFromSessionUIDResponse)
	err := c.cc.Invoke(ctx, InternalService_GetDownstreamFromSessionUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalServiceClient) Evaluate(ctx context.Context, in *EvaluateRequest, opts ...grpc.CallOption) (*EvaluateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EvaluateResponse)
	err := c.cc.Invoke(ctx, InternalService_Evaluate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InternalServiceServer is the server API for InternalService service.
// All implementations must embed UnimplementedInternalServiceServer
// for forward compatibility.
type InternalServiceServer interface {
	AuthenticateAndAuthorize(context.Context, *AuthenticateAndAuthorizeRequest) (*AuthenticateAndAuthorizeResponse, error)
	Authorize(context.Context, *AuthorizeRequest) (*AuthorizeResponse, error)
	GetDownstreamFromSessionUID(context.Context, *GetDownstreamFromSessionUIDRequest) (*GetDownstreamFromSessionUIDResponse, error)
	Evaluate(context.Context, *EvaluateRequest) (*EvaluateResponse, error)
	mustEmbedUnimplementedInternalServiceServer()
}

// UnimplementedInternalServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedInternalServiceServer struct{}

func (UnimplementedInternalServiceServer) AuthenticateAndAuthorize(context.Context, *AuthenticateAndAuthorizeRequest) (*AuthenticateAndAuthorizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthenticateAndAuthorize not implemented")
}
func (UnimplementedInternalServiceServer) Authorize(context.Context, *AuthorizeRequest) (*AuthorizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authorize not implemented")
}
func (UnimplementedInternalServiceServer) GetDownstreamFromSessionUID(context.Context, *GetDownstreamFromSessionUIDRequest) (*GetDownstreamFromSessionUIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDownstreamFromSessionUID not implemented")
}
func (UnimplementedInternalServiceServer) Evaluate(context.Context, *EvaluateRequest) (*EvaluateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Evaluate not implemented")
}
func (UnimplementedInternalServiceServer) mustEmbedUnimplementedInternalServiceServer() {}
func (UnimplementedInternalServiceServer) testEmbeddedByValue()                         {}

// UnsafeInternalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InternalServiceServer will
// result in compilation errors.
type UnsafeInternalServiceServer interface {
	mustEmbedUnimplementedInternalServiceServer()
}

func RegisterInternalServiceServer(s grpc.ServiceRegistrar, srv InternalServiceServer) {
	// If the following call pancis, it indicates UnimplementedInternalServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&InternalService_ServiceDesc, srv)
}

func _InternalService_AuthenticateAndAuthorize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateAndAuthorizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServiceServer).AuthenticateAndAuthorize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InternalService_AuthenticateAndAuthorize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServiceServer).AuthenticateAndAuthorize(ctx, req.(*AuthenticateAndAuthorizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalService_Authorize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServiceServer).Authorize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InternalService_Authorize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServiceServer).Authorize(ctx, req.(*AuthorizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalService_GetDownstreamFromSessionUID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDownstreamFromSessionUIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServiceServer).GetDownstreamFromSessionUID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InternalService_GetDownstreamFromSessionUID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServiceServer).GetDownstreamFromSessionUID(ctx, req.(*GetDownstreamFromSessionUIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalService_Evaluate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvaluateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServiceServer).Evaluate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InternalService_Evaluate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServiceServer).Evaluate(ctx, req.(*EvaluateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InternalService_ServiceDesc is the grpc.ServiceDesc for InternalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InternalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "octelium.api.cluster.octovigil.v1.InternalService",
	HandlerType: (*InternalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AuthenticateAndAuthorize",
			Handler:    _InternalService_AuthenticateAndAuthorize_Handler,
		},
		{
			MethodName: "Authorize",
			Handler:    _InternalService_Authorize_Handler,
		},
		{
			MethodName: "GetDownstreamFromSessionUID",
			Handler:    _InternalService_GetDownstreamFromSessionUID_Handler,
		},
		{
			MethodName: "Evaluate",
			Handler:    _InternalService_Evaluate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "coctovigilv1.proto",
}
