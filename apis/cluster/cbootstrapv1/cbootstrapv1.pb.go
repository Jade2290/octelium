// Copyright Octelium Labs, LLC. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.1
// 	protoc        v3.21.12
// source: cbootstrapv1.proto

package cbootstrapv1

import (
	metav1 "github.com/octelium/octelium/apis/main/metav1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Config_Spec_Network_Mode int32

const (
	// DEFAULT defaults to DUAL_STACK
	Config_Spec_Network_DEFAULT Config_Spec_Network_Mode = 0
	// DUAL_STACK sets the Cluster to operate in dual-stack mode.
	// Services receive dual-stack private addresses and clients can connect
	// in dual-stack mode, IPv4-only or IPv6-only modes.
	Config_Spec_Network_DUAL_STACK Config_Spec_Network_Mode = 1
	// V6_ONLY sets the Cluster to operate in IPv6-only mode.
	// Services receive IPv6-only private addresses and clients can connect
	// only connect via IPv6-only modes.
	Config_Spec_Network_V6_ONLY Config_Spec_Network_Mode = 2
	// V4_ONLY sets the Cluster to operate in IPv4-only mode.
	// Services receive IPv4-only private addresses and clients can connect
	// only connect via IPv4-only modes.
	Config_Spec_Network_V4_ONLY Config_Spec_Network_Mode = 3
)

// Enum value maps for Config_Spec_Network_Mode.
var (
	Config_Spec_Network_Mode_name = map[int32]string{
		0: "DEFAULT",
		1: "DUAL_STACK",
		2: "V6_ONLY",
		3: "V4_ONLY",
	}
	Config_Spec_Network_Mode_value = map[string]int32{
		"DEFAULT":    0,
		"DUAL_STACK": 1,
		"V6_ONLY":    2,
		"V4_ONLY":    3,
	}
)

func (x Config_Spec_Network_Mode) Enum() *Config_Spec_Network_Mode {
	p := new(Config_Spec_Network_Mode)
	*p = x
	return p
}

func (x Config_Spec_Network_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Config_Spec_Network_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_cbootstrapv1_proto_enumTypes[0].Descriptor()
}

func (Config_Spec_Network_Mode) Type() protoreflect.EnumType {
	return &file_cbootstrapv1_proto_enumTypes[0]
}

func (x Config_Spec_Network_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Config_Spec_Network_Mode.Descriptor instead.
func (Config_Spec_Network_Mode) EnumDescriptor() ([]byte, []int) {
	return file_cbootstrapv1_proto_rawDescGZIP(), []int{0, 0, 2, 0}
}

type Config struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ApiVersion    string                 `protobuf:"bytes,1,opt,name=apiVersion,proto3" json:"apiVersion,omitempty"`
	Kind          string                 `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	Metadata      *metav1.Metadata       `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Spec          *Config_Spec           `protobuf:"bytes,4,opt,name=spec,proto3" json:"spec,omitempty"`
	Status        *Config_Status         `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Config) Reset() {
	*x = Config{}
	mi := &file_cbootstrapv1_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_cbootstrapv1_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_cbootstrapv1_proto_rawDescGZIP(), []int{0}
}

func (x *Config) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *Config) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *Config) GetMetadata() *metav1.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Config) GetSpec() *Config_Spec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *Config) GetStatus() *Config_Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type Config_Spec struct {
	state            protoimpl.MessageState        `protogen:"open.v1"`
	PrimaryStorage   *Config_Spec_PrimaryStorage   `protobuf:"bytes,1,opt,name=primaryStorage,proto3" json:"primaryStorage,omitempty"`
	SecondaryStorage *Config_Spec_SecondaryStorage `protobuf:"bytes,2,opt,name=secondaryStorage,proto3" json:"secondaryStorage,omitempty"`
	Network          *Config_Spec_Network          `protobuf:"bytes,3,opt,name=network,proto3" json:"network,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Config_Spec) Reset() {
	*x = Config_Spec{}
	mi := &file_cbootstrapv1_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Config_Spec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config_Spec) ProtoMessage() {}

func (x *Config_Spec) ProtoReflect() protoreflect.Message {
	mi := &file_cbootstrapv1_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config_Spec.ProtoReflect.Descriptor instead.
func (*Config_Spec) Descriptor() ([]byte, []int) {
	return file_cbootstrapv1_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Config_Spec) GetPrimaryStorage() *Config_Spec_PrimaryStorage {
	if x != nil {
		return x.PrimaryStorage
	}
	return nil
}

func (x *Config_Spec) GetSecondaryStorage() *Config_Spec_SecondaryStorage {
	if x != nil {
		return x.SecondaryStorage
	}
	return nil
}

func (x *Config_Spec) GetNetwork() *Config_Spec_Network {
	if x != nil {
		return x.Network
	}
	return nil
}

type Config_Status struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Config_Status) Reset() {
	*x = Config_Status{}
	mi := &file_cbootstrapv1_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Config_Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config_Status) ProtoMessage() {}

func (x *Config_Status) ProtoReflect() protoreflect.Message {
	mi := &file_cbootstrapv1_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config_Status.ProtoReflect.Descriptor instead.
func (*Config_Status) Descriptor() ([]byte, []int) {
	return file_cbootstrapv1_proto_rawDescGZIP(), []int{0, 1}
}

type Config_Spec_PrimaryStorage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*Config_Spec_PrimaryStorage_Postgresql_
	Type          isConfig_Spec_PrimaryStorage_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Config_Spec_PrimaryStorage) Reset() {
	*x = Config_Spec_PrimaryStorage{}
	mi := &file_cbootstrapv1_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Config_Spec_PrimaryStorage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config_Spec_PrimaryStorage) ProtoMessage() {}

func (x *Config_Spec_PrimaryStorage) ProtoReflect() protoreflect.Message {
	mi := &file_cbootstrapv1_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config_Spec_PrimaryStorage.ProtoReflect.Descriptor instead.
func (*Config_Spec_PrimaryStorage) Descriptor() ([]byte, []int) {
	return file_cbootstrapv1_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *Config_Spec_PrimaryStorage) GetType() isConfig_Spec_PrimaryStorage_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Config_Spec_PrimaryStorage) GetPostgresql() *Config_Spec_PrimaryStorage_Postgresql {
	if x != nil {
		if x, ok := x.Type.(*Config_Spec_PrimaryStorage_Postgresql_); ok {
			return x.Postgresql
		}
	}
	return nil
}

type isConfig_Spec_PrimaryStorage_Type interface {
	isConfig_Spec_PrimaryStorage_Type()
}

type Config_Spec_PrimaryStorage_Postgresql_ struct {
	Postgresql *Config_Spec_PrimaryStorage_Postgresql `protobuf:"bytes,1,opt,name=postgresql,proto3,oneof"`
}

func (*Config_Spec_PrimaryStorage_Postgresql_) isConfig_Spec_PrimaryStorage_Type() {}

type Config_Spec_SecondaryStorage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*Config_Spec_SecondaryStorage_Redis_
	Type          isConfig_Spec_SecondaryStorage_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Config_Spec_SecondaryStorage) Reset() {
	*x = Config_Spec_SecondaryStorage{}
	mi := &file_cbootstrapv1_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Config_Spec_SecondaryStorage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config_Spec_SecondaryStorage) ProtoMessage() {}

func (x *Config_Spec_SecondaryStorage) ProtoReflect() protoreflect.Message {
	mi := &file_cbootstrapv1_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config_Spec_SecondaryStorage.ProtoReflect.Descriptor instead.
func (*Config_Spec_SecondaryStorage) Descriptor() ([]byte, []int) {
	return file_cbootstrapv1_proto_rawDescGZIP(), []int{0, 0, 1}
}

func (x *Config_Spec_SecondaryStorage) GetType() isConfig_Spec_SecondaryStorage_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Config_Spec_SecondaryStorage) GetRedis() *Config_Spec_SecondaryStorage_Redis {
	if x != nil {
		if x, ok := x.Type.(*Config_Spec_SecondaryStorage_Redis_); ok {
			return x.Redis
		}
	}
	return nil
}

type isConfig_Spec_SecondaryStorage_Type interface {
	isConfig_Spec_SecondaryStorage_Type()
}

type Config_Spec_SecondaryStorage_Redis_ struct {
	Redis *Config_Spec_SecondaryStorage_Redis `protobuf:"bytes,1,opt,name=redis,proto3,oneof"`
}

func (*Config_Spec_SecondaryStorage_Redis_) isConfig_Spec_SecondaryStorage_Type() {}

type Config_Spec_Network struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Mode sets the networking mode (DualStack, IPv4Only or IPv6Only) for
	// the Cluster's Networks. This can only be effective when set prior to
	// the Cluster installation or upgrade.
	Mode Config_Spec_Network_Mode `protobuf:"varint,1,opt,name=mode,proto3,enum=octelium.api.cluster.bootstrap.v1.Config_Spec_Network_Mode" json:"mode,omitempty"`
	// V4 sets IPv4 Network configurations.
	V4 *Config_Spec_Network_V4 `protobuf:"bytes,2,opt,name=v4,proto3" json:"v4,omitempty"`
	// V6 sets IPv6 Network configurations.
	V6 *Config_Spec_Network_V6 `protobuf:"bytes,3,opt,name=v6,proto3" json:"v6,omitempty"`
	// Wireguard sets the Wireguard-specific configuration
	Wireguard *Config_Spec_Network_Wireguard `protobuf:"bytes,4,opt,name=wireguard,proto3" json:"wireguard,omitempty"`
	// QUICV0 (EXPERIMENTAL) sets the QUICv0-specific configuration
	Quicv0        *Config_Spec_Network_QUICV0 `protobuf:"bytes,5,opt,name=quicv0,proto3" json:"quicv0,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Config_Spec_Network) Reset() {
	*x = Config_Spec_Network{}
	mi := &file_cbootstrapv1_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Config_Spec_Network) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config_Spec_Network) ProtoMessage() {}

func (x *Config_Spec_Network) ProtoReflect() protoreflect.Message {
	mi := &file_cbootstrapv1_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config_Spec_Network.ProtoReflect.Descriptor instead.
func (*Config_Spec_Network) Descriptor() ([]byte, []int) {
	return file_cbootstrapv1_proto_rawDescGZIP(), []int{0, 0, 2}
}

func (x *Config_Spec_Network) GetMode() Config_Spec_Network_Mode {
	if x != nil {
		return x.Mode
	}
	return Config_Spec_Network_DEFAULT
}

func (x *Config_Spec_Network) GetV4() *Config_Spec_Network_V4 {
	if x != nil {
		return x.V4
	}
	return nil
}

func (x *Config_Spec_Network) GetV6() *Config_Spec_Network_V6 {
	if x != nil {
		return x.V6
	}
	return nil
}

func (x *Config_Spec_Network) GetWireguard() *Config_Spec_Network_Wireguard {
	if x != nil {
		return x.Wireguard
	}
	return nil
}

func (x *Config_Spec_Network) GetQuicv0() *Config_Spec_Network_QUICV0 {
	if x != nil {
		return x.Quicv0
	}
	return nil
}

type Config_Spec_PrimaryStorage_Postgresql struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Username      string                 `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password      string                 `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	Host          string                 `protobuf:"bytes,3,opt,name=host,proto3" json:"host,omitempty"`
	Port          int32                  `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
	Database      string                 `protobuf:"bytes,5,opt,name=database,proto3" json:"database,omitempty"`
	IsTLS         bool                   `protobuf:"varint,6,opt,name=isTLS,proto3" json:"isTLS,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Config_Spec_PrimaryStorage_Postgresql) Reset() {
	*x = Config_Spec_PrimaryStorage_Postgresql{}
	mi := &file_cbootstrapv1_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Config_Spec_PrimaryStorage_Postgresql) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config_Spec_PrimaryStorage_Postgresql) ProtoMessage() {}

func (x *Config_Spec_PrimaryStorage_Postgresql) ProtoReflect() protoreflect.Message {
	mi := &file_cbootstrapv1_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config_Spec_PrimaryStorage_Postgresql.ProtoReflect.Descriptor instead.
func (*Config_Spec_PrimaryStorage_Postgresql) Descriptor() ([]byte, []int) {
	return file_cbootstrapv1_proto_rawDescGZIP(), []int{0, 0, 0, 0}
}

func (x *Config_Spec_PrimaryStorage_Postgresql) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Config_Spec_PrimaryStorage_Postgresql) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Config_Spec_PrimaryStorage_Postgresql) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *Config_Spec_PrimaryStorage_Postgresql) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Config_Spec_PrimaryStorage_Postgresql) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *Config_Spec_PrimaryStorage_Postgresql) GetIsTLS() bool {
	if x != nil {
		return x.IsTLS
	}
	return false
}

type Config_Spec_SecondaryStorage_Redis struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Username      string                 `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password      string                 `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	Host          string                 `protobuf:"bytes,3,opt,name=host,proto3" json:"host,omitempty"`
	Port          int32                  `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
	Database      int32                  `protobuf:"varint,5,opt,name=database,proto3" json:"database,omitempty"`
	IsTLS         bool                   `protobuf:"varint,6,opt,name=isTLS,proto3" json:"isTLS,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Config_Spec_SecondaryStorage_Redis) Reset() {
	*x = Config_Spec_SecondaryStorage_Redis{}
	mi := &file_cbootstrapv1_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Config_Spec_SecondaryStorage_Redis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config_Spec_SecondaryStorage_Redis) ProtoMessage() {}

func (x *Config_Spec_SecondaryStorage_Redis) ProtoReflect() protoreflect.Message {
	mi := &file_cbootstrapv1_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config_Spec_SecondaryStorage_Redis.ProtoReflect.Descriptor instead.
func (*Config_Spec_SecondaryStorage_Redis) Descriptor() ([]byte, []int) {
	return file_cbootstrapv1_proto_rawDescGZIP(), []int{0, 0, 1, 0}
}

func (x *Config_Spec_SecondaryStorage_Redis) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Config_Spec_SecondaryStorage_Redis) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Config_Spec_SecondaryStorage_Redis) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *Config_Spec_SecondaryStorage_Redis) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Config_Spec_SecondaryStorage_Redis) GetDatabase() int32 {
	if x != nil {
		return x.Database
	}
	return 0
}

func (x *Config_Spec_SecondaryStorage_Redis) GetIsTLS() bool {
	if x != nil {
		return x.IsTLS
	}
	return false
}

type Config_Spec_Network_V4 struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ClusterNetwork is the Cluster network range. Currently
	// `100.64.0.0/10` is used by default.
	ClusterNetwork string `protobuf:"bytes,1,opt,name=clusterNetwork,proto3" json:"clusterNetwork,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Config_Spec_Network_V4) Reset() {
	*x = Config_Spec_Network_V4{}
	mi := &file_cbootstrapv1_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Config_Spec_Network_V4) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config_Spec_Network_V4) ProtoMessage() {}

func (x *Config_Spec_Network_V4) ProtoReflect() protoreflect.Message {
	mi := &file_cbootstrapv1_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config_Spec_Network_V4.ProtoReflect.Descriptor instead.
func (*Config_Spec_Network_V4) Descriptor() ([]byte, []int) {
	return file_cbootstrapv1_proto_rawDescGZIP(), []int{0, 0, 2, 0}
}

func (x *Config_Spec_Network_V4) GetClusterNetwork() string {
	if x != nil {
		return x.ClusterNetwork
	}
	return ""
}

type Config_Spec_Network_V6 struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ClusterNetwork is the Cluster network range. Currently not enforced
	// as the Cluster automatically chooses the Network ranges.
	ClusterNetwork string `protobuf:"bytes,1,opt,name=clusterNetwork,proto3" json:"clusterNetwork,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Config_Spec_Network_V6) Reset() {
	*x = Config_Spec_Network_V6{}
	mi := &file_cbootstrapv1_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Config_Spec_Network_V6) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config_Spec_Network_V6) ProtoMessage() {}

func (x *Config_Spec_Network_V6) ProtoReflect() protoreflect.Message {
	mi := &file_cbootstrapv1_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config_Spec_Network_V6.ProtoReflect.Descriptor instead.
func (*Config_Spec_Network_V6) Descriptor() ([]byte, []int) {
	return file_cbootstrapv1_proto_rawDescGZIP(), []int{0, 0, 2, 1}
}

func (x *Config_Spec_Network_V6) GetClusterNetwork() string {
	if x != nil {
		return x.ClusterNetwork
	}
	return ""
}

type Config_Spec_Network_Wireguard struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// GatewayPort sets the Gateway port. By default it is set to 53820
	GatewayPort uint32 `protobuf:"varint,1,opt,name=gatewayPort,proto3" json:"gatewayPort,omitempty"`
	// MTU overrides the default value used for the Gateway interface's MTU.
	Mtu           uint32 `protobuf:"varint,2,opt,name=mtu,proto3" json:"mtu,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Config_Spec_Network_Wireguard) Reset() {
	*x = Config_Spec_Network_Wireguard{}
	mi := &file_cbootstrapv1_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Config_Spec_Network_Wireguard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config_Spec_Network_Wireguard) ProtoMessage() {}

func (x *Config_Spec_Network_Wireguard) ProtoReflect() protoreflect.Message {
	mi := &file_cbootstrapv1_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config_Spec_Network_Wireguard.ProtoReflect.Descriptor instead.
func (*Config_Spec_Network_Wireguard) Descriptor() ([]byte, []int) {
	return file_cbootstrapv1_proto_rawDescGZIP(), []int{0, 0, 2, 2}
}

func (x *Config_Spec_Network_Wireguard) GetGatewayPort() uint32 {
	if x != nil {
		return x.GatewayPort
	}
	return 0
}

func (x *Config_Spec_Network_Wireguard) GetMtu() uint32 {
	if x != nil {
		return x.Mtu
	}
	return 0
}

type Config_Spec_Network_QUICV0 struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Enable enables QUICv0 gateways. By default this mode is not enabled.
	Enable bool `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
	// GatewayPort sets the Gateway port. By default it is set to 8443
	GatewayPort uint32 `protobuf:"varint,2,opt,name=gatewayPort,proto3" json:"gatewayPort,omitempty"`
	// MTU overrides the default value used for the Gateway interface's MTU.
	Mtu           uint32 `protobuf:"varint,3,opt,name=mtu,proto3" json:"mtu,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Config_Spec_Network_QUICV0) Reset() {
	*x = Config_Spec_Network_QUICV0{}
	mi := &file_cbootstrapv1_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Config_Spec_Network_QUICV0) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config_Spec_Network_QUICV0) ProtoMessage() {}

func (x *Config_Spec_Network_QUICV0) ProtoReflect() protoreflect.Message {
	mi := &file_cbootstrapv1_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config_Spec_Network_QUICV0.ProtoReflect.Descriptor instead.
func (*Config_Spec_Network_QUICV0) Descriptor() ([]byte, []int) {
	return file_cbootstrapv1_proto_rawDescGZIP(), []int{0, 0, 2, 3}
}

func (x *Config_Spec_Network_QUICV0) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *Config_Spec_Network_QUICV0) GetGatewayPort() uint32 {
	if x != nil {
		return x.GatewayPort
	}
	return 0
}

func (x *Config_Spec_Network_QUICV0) GetMtu() uint32 {
	if x != nil {
		return x.Mtu
	}
	return 0
}

var File_cbootstrapv1_proto protoreflect.FileDescriptor

var file_cbootstrapv1_proto_rawDesc = []byte{
	0x0a, 0x12, 0x63, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x76, 0x31, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x21, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x62, 0x6f, 0x6f, 0x74, 0x73,
	0x74, 0x72, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x1a, 0x26, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x6d, 0x61, 0x69, 0x6e, 0x2f, 0x6d, 0x65, 0x74, 0x61,
	0x76, 0x31, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xe0, 0x0e, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x70,
	0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x3f,
	0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x42, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73,
	0x70, 0x65, 0x63, 0x12, 0x48, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x62, 0x6f, 0x6f, 0x74, 0x73,
	0x74, 0x72, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0xc8, 0x0c,
	0x0a, 0x04, 0x53, 0x70, 0x65, 0x63, 0x12, 0x65, 0x0a, 0x0e, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d,
	0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x50,
	0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x0e, 0x70,
	0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x6b, 0x0a,
	0x10, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69,
	0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x62,
	0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72,
	0x79, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x10, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x61, 0x72, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x50, 0x0a, 0x07, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6f, 0x63,
	0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x1a, 0xa5, 0x02, 0x0a,
	0x0e, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12,
	0x6a, 0x0a, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x62, 0x6f, 0x6f, 0x74, 0x73,
	0x74, 0x72, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53,
	0x70, 0x65, 0x63, 0x2e, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x48, 0x00, 0x52,
	0x0a, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x1a, 0x9e, 0x01, 0x0a, 0x0a,
	0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x54, 0x4c, 0x53, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x54, 0x4c, 0x53, 0x42, 0x06, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x1a, 0x95, 0x02, 0x0a, 0x10, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61,
	0x72, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x5d, 0x0a, 0x05, 0x72, 0x65, 0x64,
	0x69, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c,
	0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61,
	0x72, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x73, 0x48,
	0x00, 0x52, 0x05, 0x72, 0x65, 0x64, 0x69, 0x73, 0x1a, 0x99, 0x01, 0x0a, 0x05, 0x52, 0x65, 0x64,
	0x69, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f,
	0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x73, 0x54, 0x4c, 0x53, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69,
	0x73, 0x54, 0x4c, 0x53, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x1a, 0xd9, 0x05, 0x0a,
	0x07, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x4f, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75,
	0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x62, 0x6f,
	0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x4d,
	0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x49, 0x0a, 0x02, 0x76, 0x34, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x62, 0x6f, 0x6f,
	0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x56, 0x34,
	0x52, 0x02, 0x76, 0x34, 0x12, 0x49, 0x0a, 0x02, 0x76, 0x36, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x39, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x70, 0x65, 0x63,
	0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x56, 0x36, 0x52, 0x02, 0x76, 0x36, 0x12,
	0x5e, 0x0a, 0x09, 0x77, 0x69, 0x72, 0x65, 0x67, 0x75, 0x61, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x40, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74,
	0x72, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x70,
	0x65, 0x63, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x57, 0x69, 0x72, 0x65, 0x67,
	0x75, 0x61, 0x72, 0x64, 0x52, 0x09, 0x77, 0x69, 0x72, 0x65, 0x67, 0x75, 0x61, 0x72, 0x64, 0x12,
	0x55, 0x0a, 0x06, 0x71, 0x75, 0x69, 0x63, 0x76, 0x30, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3d, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x51, 0x55, 0x49, 0x43, 0x56, 0x30, 0x52, 0x06,
	0x71, 0x75, 0x69, 0x63, 0x76, 0x30, 0x1a, 0x2c, 0x0a, 0x02, 0x56, 0x34, 0x12, 0x26, 0x0a, 0x0e,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x1a, 0x2c, 0x0a, 0x02, 0x56, 0x36, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x1a, 0x3f, 0x0a, 0x09, 0x57, 0x69, 0x72, 0x65, 0x67, 0x75, 0x61, 0x72, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x50, 0x6f, 0x72,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x74, 0x75, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x6d, 0x74, 0x75, 0x1a, 0x54, 0x0a, 0x06, 0x51, 0x55, 0x49, 0x43, 0x56, 0x30, 0x12, 0x16, 0x0a,
	0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x50, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x74, 0x75, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6d, 0x74, 0x75, 0x22, 0x3d, 0x0a, 0x04, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x0e,
	0x0a, 0x0a, 0x44, 0x55, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x10, 0x01, 0x12, 0x0b,
	0x0a, 0x07, 0x56, 0x36, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x56,
	0x34, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x03, 0x1a, 0x08, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x42, 0x38, 0x5a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2f, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69,
	0x75, 0x6d, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2f,
	0x63, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cbootstrapv1_proto_rawDescOnce sync.Once
	file_cbootstrapv1_proto_rawDescData = file_cbootstrapv1_proto_rawDesc
)

func file_cbootstrapv1_proto_rawDescGZIP() []byte {
	file_cbootstrapv1_proto_rawDescOnce.Do(func() {
		file_cbootstrapv1_proto_rawDescData = protoimpl.X.CompressGZIP(file_cbootstrapv1_proto_rawDescData)
	})
	return file_cbootstrapv1_proto_rawDescData
}

var file_cbootstrapv1_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_cbootstrapv1_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_cbootstrapv1_proto_goTypes = []any{
	(Config_Spec_Network_Mode)(0),                 // 0: octelium.api.cluster.bootstrap.v1.Config.Spec.Network.Mode
	(*Config)(nil),                                // 1: octelium.api.cluster.bootstrap.v1.Config
	(*Config_Spec)(nil),                           // 2: octelium.api.cluster.bootstrap.v1.Config.Spec
	(*Config_Status)(nil),                         // 3: octelium.api.cluster.bootstrap.v1.Config.Status
	(*Config_Spec_PrimaryStorage)(nil),            // 4: octelium.api.cluster.bootstrap.v1.Config.Spec.PrimaryStorage
	(*Config_Spec_SecondaryStorage)(nil),          // 5: octelium.api.cluster.bootstrap.v1.Config.Spec.SecondaryStorage
	(*Config_Spec_Network)(nil),                   // 6: octelium.api.cluster.bootstrap.v1.Config.Spec.Network
	(*Config_Spec_PrimaryStorage_Postgresql)(nil), // 7: octelium.api.cluster.bootstrap.v1.Config.Spec.PrimaryStorage.Postgresql
	(*Config_Spec_SecondaryStorage_Redis)(nil),    // 8: octelium.api.cluster.bootstrap.v1.Config.Spec.SecondaryStorage.Redis
	(*Config_Spec_Network_V4)(nil),                // 9: octelium.api.cluster.bootstrap.v1.Config.Spec.Network.V4
	(*Config_Spec_Network_V6)(nil),                // 10: octelium.api.cluster.bootstrap.v1.Config.Spec.Network.V6
	(*Config_Spec_Network_Wireguard)(nil),         // 11: octelium.api.cluster.bootstrap.v1.Config.Spec.Network.Wireguard
	(*Config_Spec_Network_QUICV0)(nil),            // 12: octelium.api.cluster.bootstrap.v1.Config.Spec.Network.QUICV0
	(*metav1.Metadata)(nil),                       // 13: octelium.api.main.meta.v1.Metadata
}
var file_cbootstrapv1_proto_depIdxs = []int32{
	13, // 0: octelium.api.cluster.bootstrap.v1.Config.metadata:type_name -> octelium.api.main.meta.v1.Metadata
	2,  // 1: octelium.api.cluster.bootstrap.v1.Config.spec:type_name -> octelium.api.cluster.bootstrap.v1.Config.Spec
	3,  // 2: octelium.api.cluster.bootstrap.v1.Config.status:type_name -> octelium.api.cluster.bootstrap.v1.Config.Status
	4,  // 3: octelium.api.cluster.bootstrap.v1.Config.Spec.primaryStorage:type_name -> octelium.api.cluster.bootstrap.v1.Config.Spec.PrimaryStorage
	5,  // 4: octelium.api.cluster.bootstrap.v1.Config.Spec.secondaryStorage:type_name -> octelium.api.cluster.bootstrap.v1.Config.Spec.SecondaryStorage
	6,  // 5: octelium.api.cluster.bootstrap.v1.Config.Spec.network:type_name -> octelium.api.cluster.bootstrap.v1.Config.Spec.Network
	7,  // 6: octelium.api.cluster.bootstrap.v1.Config.Spec.PrimaryStorage.postgresql:type_name -> octelium.api.cluster.bootstrap.v1.Config.Spec.PrimaryStorage.Postgresql
	8,  // 7: octelium.api.cluster.bootstrap.v1.Config.Spec.SecondaryStorage.redis:type_name -> octelium.api.cluster.bootstrap.v1.Config.Spec.SecondaryStorage.Redis
	0,  // 8: octelium.api.cluster.bootstrap.v1.Config.Spec.Network.mode:type_name -> octelium.api.cluster.bootstrap.v1.Config.Spec.Network.Mode
	9,  // 9: octelium.api.cluster.bootstrap.v1.Config.Spec.Network.v4:type_name -> octelium.api.cluster.bootstrap.v1.Config.Spec.Network.V4
	10, // 10: octelium.api.cluster.bootstrap.v1.Config.Spec.Network.v6:type_name -> octelium.api.cluster.bootstrap.v1.Config.Spec.Network.V6
	11, // 11: octelium.api.cluster.bootstrap.v1.Config.Spec.Network.wireguard:type_name -> octelium.api.cluster.bootstrap.v1.Config.Spec.Network.Wireguard
	12, // 12: octelium.api.cluster.bootstrap.v1.Config.Spec.Network.quicv0:type_name -> octelium.api.cluster.bootstrap.v1.Config.Spec.Network.QUICV0
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_cbootstrapv1_proto_init() }
func file_cbootstrapv1_proto_init() {
	if File_cbootstrapv1_proto != nil {
		return
	}
	file_cbootstrapv1_proto_msgTypes[3].OneofWrappers = []any{
		(*Config_Spec_PrimaryStorage_Postgresql_)(nil),
	}
	file_cbootstrapv1_proto_msgTypes[4].OneofWrappers = []any{
		(*Config_Spec_SecondaryStorage_Redis_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cbootstrapv1_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cbootstrapv1_proto_goTypes,
		DependencyIndexes: file_cbootstrapv1_proto_depIdxs,
		EnumInfos:         file_cbootstrapv1_proto_enumTypes,
		MessageInfos:      file_cbootstrapv1_proto_msgTypes,
	}.Build()
	File_cbootstrapv1_proto = out.File
	file_cbootstrapv1_proto_rawDesc = nil
	file_cbootstrapv1_proto_goTypes = nil
	file_cbootstrapv1_proto_depIdxs = nil
}
